function _asyncIterator(iterable) {
  var method;

  if (typeof Symbol !== "undefined") {
    if (Symbol.asyncIterator) {
      method = iterable[Symbol.asyncIterator];
      if (method != null) return method.call(iterable);
    }

    if (Symbol.iterator) {
      method = iterable[Symbol.iterator];
      if (method != null) return method.call(iterable);
    }
  }

  throw new TypeError("Object is not async iterable");
}

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume(key === "return" ? "return" : "next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

if (typeof Symbol === "function" && Symbol.asyncIterator) {
  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
    return this;
  };
}

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function _wrapAsyncGenerator(fn) {
  return function () {
    return new _AsyncGenerator(fn.apply(this, arguments));
  };
}

function _awaitAsyncGenerator(value) {
  return new _AwaitValue(value);
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

var MarkProcessor = /*#__PURE__*/function () {
  function MarkProcessor(visitor, string, marks) {
    this.visitor = visitor;
    this.string = string;
    this.marks = marks;
    this.index = 0;
  }

  var _proto = MarkProcessor.prototype;

  _proto.hasMark = function hasMark(pos) {
    if (pos === void 0) {
      pos = 0;
    }

    return this.index + pos < this.marks.length;
  };

  _proto.getMark = function getMark(pos) {
    if (pos === void 0) {
      pos = 0;
    }

    return this.marks[this.index + pos];
  };

  _proto.shift = function shift() {
    this.index += 1;
  };

  _proto.process = function process() {
    var mark = this.marks[this.index];
    this.shift();
    var func = this.visitor[mark.name];
    if (!func) throw new Error('Unknown handler: ' + mark.name);
    return func.call(this.visitor, this, mark);
  };

  _proto.processString = function processString() {
    this.shift();
    return this.processStringEnd();
  };

  _proto.processStringEnd = function processStringEnd() {
    var prev = this.marks[this.index - 1];
    var curr = this.marks[this.index];
    this.shift();
    return this.string.slice(prev.position, curr.position);
  };

  return MarkProcessor;
}();

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

/**
 * Returns the type of the value.
 */
function _getType(data) {
  if (data === null || typeof data === 'undefined') return 'null';
  if (Array.isArray(data)) return 'array';
  if (data instanceof Range) return 'range';
  if (data instanceof Path) return 'path';
  return typeof data;
}
var StaticValue = /*#__PURE__*/function () {
  function StaticValue(data) {
    this.data = data;
  }

  var _proto = StaticValue.prototype;

  _proto.getType = function getType() {
    return _getType(this.data);
  };

  _proto.get = /*#__PURE__*/function () {
    var _get = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", this.data);

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function get() {
      return _get.apply(this, arguments);
    }

    return get;
  }();

  _proto[Symbol.asyncIterator] = function () {
    if (Array.isArray(this.data)) {
      return /*#__PURE__*/runtime_1.mark(function _callee2(data) {
        var _iterator4, _step4, element;

        return runtime_1.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _iterator4 = _createForOfIteratorHelperLoose(data);

              case 1:
                if ((_step4 = _iterator4()).done) {
                  _context2.next = 7;
                  break;
                }

                element = _step4.value;
                _context2.next = 5;
                return new StaticValue(element);

              case 5:
                _context2.next = 1;
                break;

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })(this.data);
    } else {
      throw new Error('Cannot iterate over: ' + this.getType());
    }
  };

  _proto.getBoolean = function getBoolean() {
    return typeof this.data === 'boolean' && this.data === true;
  };

  return StaticValue;
}();
/**
 * A StreamValue accepts a generator which yields values.
 */

var StreamValue = /*#__PURE__*/function () {
  function StreamValue(generator) {
    this.generator = generator;
    this.ticker = null;
    this.isDone = false;
    this.data = [];
  }

  var _proto2 = StreamValue.prototype;

  _proto2.getType = function getType() {
    return 'array';
  };

  _proto2.get = /*#__PURE__*/function () {
    var _get2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
      var result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, value;

      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              result = [];
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _context3.prev = 3;
              _iterator = _asyncIterator(this);

            case 5:
              _context3.next = 7;
              return _iterator.next();

            case 7:
              _step = _context3.sent;
              _iteratorNormalCompletion = _step.done;
              _context3.next = 11;
              return _step.value;

            case 11:
              _value = _context3.sent;

              if (_iteratorNormalCompletion) {
                _context3.next = 22;
                break;
              }

              value = _value;
              _context3.t0 = result;
              _context3.next = 17;
              return value.get();

            case 17:
              _context3.t1 = _context3.sent;

              _context3.t0.push.call(_context3.t0, _context3.t1);

            case 19:
              _iteratorNormalCompletion = true;
              _context3.next = 5;
              break;

            case 22:
              _context3.next = 28;
              break;

            case 24:
              _context3.prev = 24;
              _context3.t2 = _context3["catch"](3);
              _didIteratorError = true;
              _iteratorError = _context3.t2;

            case 28:
              _context3.prev = 28;
              _context3.prev = 29;

              if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                _context3.next = 33;
                break;
              }

              _context3.next = 33;
              return _iterator["return"]();

            case 33:
              _context3.prev = 33;

              if (!_didIteratorError) {
                _context3.next = 36;
                break;
              }

              throw _iteratorError;

            case 36:
              return _context3.finish(33);

            case 37:
              return _context3.finish(28);

            case 38:
              return _context3.abrupt("return", result);

            case 39:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[3, 24, 28, 38], [29,, 33, 37]]);
    }));

    function get() {
      return _get2.apply(this, arguments);
    }

    return get;
  }();

  _proto2[Symbol.asyncIterator] = function () {
    var _this = this;

    return _wrapAsyncGenerator( /*#__PURE__*/runtime_1.mark(function _callee4() {
      var i;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              i = 0;

            case 1:

            case 2:
              if (!(i < _this.data.length)) {
                _context4.next = 8;
                break;
              }

              _context4.next = 5;
              return _this.data[i];

            case 5:
              i++;
              _context4.next = 2;
              break;

            case 8:
              if (!_this.isDone) {
                _context4.next = 10;
                break;
              }

              return _context4.abrupt("return");

            case 10:
              _context4.next = 12;
              return _awaitAsyncGenerator(_this._nextTick());

            case 12:
              _context4.next = 1;
              break;

            case 14:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }))();
  };

  _proto2.getBoolean = function getBoolean() {
    return false;
  };

  _proto2._nextTick = function _nextTick() {
    var _this2 = this;

    if (this.ticker) return this.ticker;
    var currentResolver;

    var setupTicker = function setupTicker() {
      _this2.ticker = new Promise(function (resolve) {
        currentResolver = resolve;
      });
    };

    var tick = function tick() {
      currentResolver();
      setupTicker();
    };

    var fetch = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, value;

        return runtime_1.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _context5.prev = 2;
                _iterator2 = _asyncIterator(_this2.generator());

              case 4:
                _context5.next = 6;
                return _iterator2.next();

              case 6:
                _step2 = _context5.sent;
                _iteratorNormalCompletion2 = _step2.done;
                _context5.next = 10;
                return _step2.value;

              case 10:
                _value2 = _context5.sent;

                if (_iteratorNormalCompletion2) {
                  _context5.next = 18;
                  break;
                }

                value = _value2;

                _this2.data.push(value);

                tick();

              case 15:
                _iteratorNormalCompletion2 = true;
                _context5.next = 4;
                break;

              case 18:
                _context5.next = 24;
                break;

              case 20:
                _context5.prev = 20;
                _context5.t0 = _context5["catch"](2);
                _didIteratorError2 = true;
                _iteratorError2 = _context5.t0;

              case 24:
                _context5.prev = 24;
                _context5.prev = 25;

                if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
                  _context5.next = 29;
                  break;
                }

                _context5.next = 29;
                return _iterator2["return"]();

              case 29:
                _context5.prev = 29;

                if (!_didIteratorError2) {
                  _context5.next = 32;
                  break;
                }

                throw _iteratorError2;

              case 32:
                return _context5.finish(29);

              case 33:
                return _context5.finish(24);

              case 34:
                _this2.isDone = true;
                tick();

              case 36:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, null, [[2, 20, 24, 34], [25,, 29, 33]]);
      }));

      return function fetch() {
        return _ref2.apply(this, arguments);
      };
    }();

    setupTicker();
    fetch();
    return this.ticker;
  };

  return StreamValue;
}();
var MapperValue = /*#__PURE__*/function () {
  function MapperValue(value) {
    this.value = value;
  }

  var _proto3 = MapperValue.prototype;

  _proto3.getType = function getType() {
    return 'array';
  };

  _proto3.get = /*#__PURE__*/function () {
    var _get3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.value.get();

            case 2:
              return _context6.abrupt("return", _context6.sent);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function get() {
      return _get3.apply(this, arguments);
    }

    return get;
  }();

  _proto3[Symbol.asyncIterator] = function () {
    var value = this.value;
    var iterator = value[Symbol.asyncIterator];
    return iterator.call(this.value);
  };

  _proto3.getBoolean = function getBoolean() {
    return false;
  };

  return MapperValue;
}();
var Range = /*#__PURE__*/function () {
  function Range(left, right, exclusive) {
    this.left = left;
    this.right = right;
    this.exclusive = exclusive;
  }

  Range.isConstructible = function isConstructible(leftType, rightType) {
    if (leftType === rightType) {
      if (leftType === 'number') return true;
      if (leftType === 'string') return true;
      if (leftType === 'boolean') return true;
    }

    return false;
  };

  var _proto4 = Range.prototype;

  _proto4.isExclusive = function isExclusive() {
    return this.exclusive;
  };

  _proto4.toJSON = function toJSON() {
    return [this.left, this.right];
  };

  return Range;
}();
var Pair = /*#__PURE__*/function () {
  function Pair(first, second) {
    this.first = first;
    this.second = second;
  }

  var _proto5 = Pair.prototype;

  _proto5.toJSON = function toJSON() {
    return [this.first, this.second];
  };

  return Pair;
}();

function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function pathRegExp(pattern) {
  var re = [];

  for (var _iterator5 = _createForOfIteratorHelperLoose(pattern.split('.')), _step5; !(_step5 = _iterator5()).done;) {
    var part = _step5.value;

    if (part === '*') {
      re.push('[^.]+');
    } else if (part === '**') {
      re.push('.*');
    } else {
      re.push(escapeRegExp(part));
    }
  }

  return new RegExp("^" + re.join('.') + "$");
}

var Path = /*#__PURE__*/function () {
  function Path(pattern) {
    this.pattern = pattern;
    this.patternRe = pathRegExp(pattern);
  }

  var _proto6 = Path.prototype;

  _proto6.matches = function matches(str) {
    return this.patternRe.test(str);
  };

  _proto6.toJSON = function toJSON() {
    return this.pattern;
  };

  return Path;
}();
function fromNumber(num) {
  if (Number.isFinite(num)) {
    return new StaticValue(num);
  } else {
    return exports.NULL_VALUE;
  }
}

function isIterator(obj) {
  return obj && typeof obj.next === 'function';
}

function fromJS(val) {
  if (isIterator(val)) {
    return new StreamValue( /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {
      var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, value;

      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _context7.prev = 2;
              _iterator3 = _asyncIterator(val);

            case 4:
              _context7.next = 6;
              return _awaitAsyncGenerator(_iterator3.next());

            case 6:
              _step3 = _context7.sent;
              _iteratorNormalCompletion3 = _step3.done;
              _context7.next = 10;
              return _awaitAsyncGenerator(_step3.value);

            case 10:
              _value3 = _context7.sent;

              if (_iteratorNormalCompletion3) {
                _context7.next = 18;
                break;
              }

              value = _value3;
              _context7.next = 15;
              return new StaticValue(value);

            case 15:
              _iteratorNormalCompletion3 = true;
              _context7.next = 4;
              break;

            case 18:
              _context7.next = 24;
              break;

            case 20:
              _context7.prev = 20;
              _context7.t0 = _context7["catch"](2);
              _didIteratorError3 = true;
              _iteratorError3 = _context7.t0;

            case 24:
              _context7.prev = 24;
              _context7.prev = 25;

              if (!(!_iteratorNormalCompletion3 && _iterator3["return"] != null)) {
                _context7.next = 29;
                break;
              }

              _context7.next = 29;
              return _awaitAsyncGenerator(_iterator3["return"]());

            case 29:
              _context7.prev = 29;

              if (!_didIteratorError3) {
                _context7.next = 32;
                break;
              }

              throw _iteratorError3;

            case 32:
              return _context7.finish(29);

            case 33:
              return _context7.finish(24);

            case 34:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, null, [[2, 20, 24, 34], [25,, 29, 33]]);
    })));
  } else if (val === null || val === undefined) {
    return exports.NULL_VALUE;
  } else {
    return new StaticValue(val);
  }
}
var NULL_VALUE = /*#__PURE__*/new StaticValue(null);
var TRUE_VALUE = /*#__PURE__*/new StaticValue(true);
var FALSE_VALUE = /*#__PURE__*/new StaticValue(false);

var TYPE_ORDER = {
  number: 1,
  string: 2,
  "boolean": 3
};
function partialCompare(a, b) {
  var aType = _getType(a);
  var bType = _getType(b);
  if (aType !== bType) return null;

  switch (aType) {
    case 'number':
    case 'boolean':
      return a - b;

    case 'string':
      return a < b ? -1 : a > b ? 1 : 0;
  }

  return null;
}
function totalCompare(a, b) {
  var aType = _getType(a);
  var bType = _getType(b);
  var aTypeOrder = TYPE_ORDER[aType] || 100;
  var bTypeOrder = TYPE_ORDER[bType] || 100;

  if (aTypeOrder !== bTypeOrder) {
    return aTypeOrder - bTypeOrder;
  }

  var result = partialCompare(a, b);
  if (result === null) result = 0;
  return result;
}

function hasReference(value, id) {
  switch (_getType(value)) {
    case 'array':
      for (var _iterator3 = _createForOfIteratorHelperLoose(value), _step3; !(_step3 = _iterator3()).done;) {
        var v = _step3.value;
        if (hasReference(v, id)) return true;
      }

      break;

    case 'object':
      if (value._ref === id) return true;

      for (var _i = 0, _Object$values = Object.values(value); _i < _Object$values.length; _i++) {
        var _v = _Object$values[_i];
        if (hasReference(_v, id)) return true;
      }

      break;
  }

  return false;
}

function countUTF8(str) {
  var count = 0;

  for (var i = 0; i < str.length; i++) {
    var code = str.charCodeAt(i);

    if (code >= 0xd800 && code <= 0xdbff) {
      // High surrogate. Don't count this.
      // By only counting the low surrogate we will correctly
      // count the number of UTF-8 code points.
      continue;
    }

    count++;
  }

  return count;
}

var functions = {};

functions.coalesce = /*#__PURE__*/function () {
  var _coalesce = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(args, scope, execute) {
    var _iterator4, _step4, arg, value;

    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _iterator4 = _createForOfIteratorHelperLoose(args);

          case 1:
            if ((_step4 = _iterator4()).done) {
              _context.next = 10;
              break;
            }

            arg = _step4.value;
            _context.next = 5;
            return execute(arg, scope);

          case 5:
            value = _context.sent;

            if (!(value.getType() !== 'null')) {
              _context.next = 8;
              break;
            }

            return _context.abrupt("return", value);

          case 8:
            _context.next = 1;
            break;

          case 10:
            return _context.abrupt("return", NULL_VALUE);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  function coalesce(_x, _x2, _x3) {
    return _coalesce.apply(this, arguments);
  }

  return coalesce;
}();

functions.count = /*#__PURE__*/function () {
  var _count = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(args, scope, execute) {
    var inner, num, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step;

    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return execute(args[0], scope);

          case 2:
            inner = _context2.sent;

            if (!(inner.getType() !== 'array')) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt("return", NULL_VALUE);

          case 5:
            num = 0;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context2.prev = 8;
            _iterator = _asyncIterator(inner);

          case 10:
            _context2.next = 12;
            return _iterator.next();

          case 12:
            _step = _context2.sent;
            _iteratorNormalCompletion = _step.done;
            _context2.next = 16;
            return _step.value;

          case 16:

            if (_iteratorNormalCompletion) {
              _context2.next = 23;
              break;
            }
            num++;

          case 20:
            _iteratorNormalCompletion = true;
            _context2.next = 10;
            break;

          case 23:
            _context2.next = 29;
            break;

          case 25:
            _context2.prev = 25;
            _context2.t0 = _context2["catch"](8);
            _didIteratorError = true;
            _iteratorError = _context2.t0;

          case 29:
            _context2.prev = 29;
            _context2.prev = 30;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context2.next = 34;
              break;
            }

            _context2.next = 34;
            return _iterator["return"]();

          case 34:
            _context2.prev = 34;

            if (!_didIteratorError) {
              _context2.next = 37;
              break;
            }

            throw _iteratorError;

          case 37:
            return _context2.finish(34);

          case 38:
            return _context2.finish(29);

          case 39:
            return _context2.abrupt("return", new StaticValue(num));

          case 40:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[8, 25, 29, 39], [30,, 34, 38]]);
  }));

  function count(_x4, _x5, _x6) {
    return _count.apply(this, arguments);
  }

  return count;
}();

functions.count.arity = 1;

functions.defined = /*#__PURE__*/function () {
  var _defined = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(args, scope, execute) {
    var inner;
    return runtime_1.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return execute(args[0], scope);

          case 2:
            inner = _context3.sent;
            return _context3.abrupt("return", inner.getType() === 'null' ? FALSE_VALUE : TRUE_VALUE);

          case 4:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  function defined(_x7, _x8, _x9) {
    return _defined.apply(this, arguments);
  }

  return defined;
}();

functions.defined.arity = 1;

functions.identity = /*#__PURE__*/function () {
  var _identity = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(args) {
    return runtime_1.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", new StaticValue('me'));

          case 1:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  function identity(_x10) {
    return _identity.apply(this, arguments);
  }

  return identity;
}();

functions.identity.arity = 0;

functions.length = /*#__PURE__*/function () {
  var _length = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(args, scope, execute) {
    var inner, data;
    return runtime_1.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return execute(args[0], scope);

          case 2:
            inner = _context5.sent;

            if (!(inner.getType() === 'string')) {
              _context5.next = 8;
              break;
            }

            _context5.next = 6;
            return inner.get();

          case 6:
            data = _context5.sent;
            return _context5.abrupt("return", fromNumber(countUTF8(data)));

          case 8:
            return _context5.abrupt("return", NULL_VALUE);

          case 9:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  function length(_x11, _x12, _x13) {
    return _length.apply(this, arguments);
  }

  return length;
}();

functions.length.arity = 1;

functions.path = /*#__PURE__*/function () {
  var _path = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(args, scope, execute) {
    var inner, str;
    return runtime_1.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return execute(args[0], scope);

          case 2:
            inner = _context6.sent;

            if (!(inner.getType() !== 'string')) {
              _context6.next = 5;
              break;
            }

            return _context6.abrupt("return", NULL_VALUE);

          case 5:
            _context6.next = 7;
            return inner.get();

          case 7:
            str = _context6.sent;
            return _context6.abrupt("return", new StaticValue(new Path(str)));

          case 9:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));

  function path(_x14, _x15, _x16) {
    return _path.apply(this, arguments);
  }

  return path;
}();

functions.path.arity = 1;

functions.select = /*#__PURE__*/function () {
  var _select = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(args, scope, execute) {
    var seenFallback, _iterator5, _step5, arg, _iterator6, _step6, _arg, cond;

    return runtime_1.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            // First check if everything is valid:
            seenFallback = false;
            _iterator5 = _createForOfIteratorHelperLoose(args);

          case 2:
            if ((_step5 = _iterator5()).done) {
              _context7.next = 9;
              break;
            }

            arg = _step5.value;

            if (!seenFallback) {
              _context7.next = 6;
              break;
            }

            return _context7.abrupt("return", NULL_VALUE);

          case 6:
            if (arg.type === 'Pair') ; else {
              seenFallback = true;
            }

          case 7:
            _context7.next = 2;
            break;

          case 9:
            _iterator6 = _createForOfIteratorHelperLoose(args);

          case 10:
            if ((_step6 = _iterator6()).done) {
              _context7.next = 27;
              break;
            }

            _arg = _step6.value;

            if (!(_arg.type === 'Pair')) {
              _context7.next = 22;
              break;
            }

            _context7.next = 15;
            return execute(_arg.left, scope);

          case 15:
            cond = _context7.sent;

            if (!cond.getBoolean()) {
              _context7.next = 20;
              break;
            }

            _context7.next = 19;
            return execute(_arg.right, scope);

          case 19:
            return _context7.abrupt("return", _context7.sent);

          case 20:
            _context7.next = 25;
            break;

          case 22:
            _context7.next = 24;
            return execute(_arg, scope);

          case 24:
            return _context7.abrupt("return", _context7.sent);

          case 25:
            _context7.next = 10;
            break;

          case 27:
            return _context7.abrupt("return", NULL_VALUE);

          case 28:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));

  function select(_x17, _x18, _x19) {
    return _select.apply(this, arguments);
  }

  return select;
}();

functions.references = /*#__PURE__*/function () {
  var _references = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(args, scope, execute) {
    var idValue, id, scopeValue;
    return runtime_1.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return execute(args[0], scope);

          case 2:
            idValue = _context8.sent;

            if (!(idValue.getType() !== 'string')) {
              _context8.next = 5;
              break;
            }

            return _context8.abrupt("return", FALSE_VALUE);

          case 5:
            _context8.next = 7;
            return idValue.get();

          case 7:
            id = _context8.sent;
            scopeValue = scope.value;
            return _context8.abrupt("return", hasReference(scopeValue, id) ? TRUE_VALUE : FALSE_VALUE);

          case 10:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));

  function references(_x20, _x21, _x22) {
    return _references.apply(this, arguments);
  }

  return references;
}();

functions.references.arity = 1;

functions.round = /*#__PURE__*/function () {
  var _round = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(args, scope, execute) {
    var value, num, prec, precValue;
    return runtime_1.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return execute(args[0], scope);

          case 2:
            value = _context9.sent;

            if (!(value.getType() !== 'number')) {
              _context9.next = 5;
              break;
            }

            return _context9.abrupt("return", NULL_VALUE);

          case 5:
            _context9.next = 7;
            return value.get();

          case 7:
            num = _context9.sent;
            prec = 0;

            if (!(args.length === 2)) {
              _context9.next = 18;
              break;
            }

            _context9.next = 12;
            return execute(args[1], scope);

          case 12:
            precValue = _context9.sent;

            if (!(precValue.getType() !== 'number')) {
              _context9.next = 15;
              break;
            }

            return _context9.abrupt("return", NULL_VALUE);

          case 15:
            _context9.next = 17;
            return precValue.get();

          case 17:
            prec = _context9.sent;

          case 18:
            if (!(prec === 0)) {
              _context9.next = 22;
              break;
            }

            return _context9.abrupt("return", fromNumber(Math.round(num)));

          case 22:
            return _context9.abrupt("return", fromNumber(Number(num.toFixed(prec))));

          case 23:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));

  function round(_x23, _x24, _x25) {
    return _round.apply(this, arguments);
  }

  return round;
}();

functions.round.arity = function (count) {
  return count >= 1 && count <= 2;
};

functions.now = /*#__PURE__*/function () {
  var _now = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(args, scope) {
    return runtime_1.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            return _context10.abrupt("return", new StaticValue(scope.timestamp));

          case 1:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));

  function now(_x26, _x27) {
    return _now.apply(this, arguments);
  }

  return now;
}();

functions.now.arity = 0;
var pipeFunctions = {};

pipeFunctions.order = /*#__PURE__*/function () {
  var _order = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(base, args, scope, execute) {
    var mappers, directions, n, _iterator7, _step7, mapper, direction, aux, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, value, newScope, tuple, i, result;

    return runtime_1.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return true;

          case 2:
            if (!(base.getType() !== 'array')) {
              _context11.next = 4;
              break;
            }

            return _context11.abrupt("return", NULL_VALUE);

          case 4:
            mappers = [];
            directions = [];
            n = 0;

            for (_iterator7 = _createForOfIteratorHelperLoose(args); !(_step7 = _iterator7()).done;) {
              mapper = _step7.value;
              direction = 'asc';

              if (mapper.type === 'Desc') {
                direction = 'desc';
                mapper = mapper.base;
              } else if (mapper.type === 'Asc') {
                mapper = mapper.base;
              }

              mappers.push(mapper);
              directions.push(direction);
              n++;
            }

            aux = [];
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _context11.prev = 11;
            _iterator2 = _asyncIterator(base);

          case 13:
            _context11.next = 15;
            return _iterator2.next();

          case 15:
            _step2 = _context11.sent;
            _iteratorNormalCompletion2 = _step2.done;
            _context11.next = 19;
            return _step2.value;

          case 19:
            _value2 = _context11.sent;

            if (_iteratorNormalCompletion2) {
              _context11.next = 44;
              break;
            }

            value = _value2;
            newScope = scope.createNested(value);
            _context11.next = 25;
            return value.get();

          case 25:
            _context11.t0 = _context11.sent;
            tuple = [_context11.t0];
            i = 0;

          case 28:
            if (!(i < n)) {
              _context11.next = 40;
              break;
            }

            _context11.next = 31;
            return execute(mappers[i], newScope);

          case 31:
            result = _context11.sent;
            _context11.t1 = tuple;
            _context11.next = 35;
            return result.get();

          case 35:
            _context11.t2 = _context11.sent;

            _context11.t1.push.call(_context11.t1, _context11.t2);

          case 37:
            i++;
            _context11.next = 28;
            break;

          case 40:
            aux.push(tuple);

          case 41:
            _iteratorNormalCompletion2 = true;
            _context11.next = 13;
            break;

          case 44:
            _context11.next = 50;
            break;

          case 46:
            _context11.prev = 46;
            _context11.t3 = _context11["catch"](11);
            _didIteratorError2 = true;
            _iteratorError2 = _context11.t3;

          case 50:
            _context11.prev = 50;
            _context11.prev = 51;

            if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
              _context11.next = 55;
              break;
            }

            _context11.next = 55;
            return _iterator2["return"]();

          case 55:
            _context11.prev = 55;

            if (!_didIteratorError2) {
              _context11.next = 58;
              break;
            }

            throw _iteratorError2;

          case 58:
            return _context11.finish(55);

          case 59:
            return _context11.finish(50);

          case 60:
            aux.sort(function (aTuple, bTuple) {
              for (var _i2 = 0; _i2 < n; _i2++) {
                var c = totalCompare(aTuple[_i2 + 1], bTuple[_i2 + 1]);
                if (directions[_i2] === 'desc') c = -c;
                if (c !== 0) return c;
              }

              return 0;
            });
            return _context11.abrupt("return", new StaticValue(aux.map(function (v) {
              return v[0];
            })));

          case 62:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11, null, [[11, 46, 50, 60], [51,, 55, 59]]);
  }));

  function order(_x28, _x29, _x30, _x31) {
    return _order.apply(this, arguments);
  }

  return order;
}();

pipeFunctions.order.arity = function (count) {
  return count >= 1;
};

function State() {}

function Step(token, position) {
  this.token = token;
  this.position = position;
  this.nextFrames = [];
  this.acceptedContexts = [];
  this.callers = {};
}

Step.prototype.hasNextFrames = function hasNextFrames() {
  return this.nextFrames.length > 0;
};

Step.prototype.addNextFrame = function addNextFrame(frame) {
  this.nextFrames.push(frame);
};

Step.prototype.wasAccepted = function wasAccepted() {
  return this.acceptedContexts.length > 0;
};

Step.prototype.addAccept = function addAccept(context) {
  this.acceptedContexts.push(context);
};

Step.prototype.addMark = function addMark(name, context, nextState) {
  var mark = {
    type: "mark",
    name: name,
    position: this.position
  };
  var marks = context.marks ? {
    type: "concat",
    left: context.marks,
    right: mark
  } : mark;
  var nextContext = new Context(context.caller, marks);
  var nextFrame = new Frame(nextContext);
  nextState.p(this, nextFrame);
  addNextFrame(this, nextFrame);
};

Step.prototype.startCall = function startCall(ruleId) {
  var caller = this.callers[ruleId];

  if (!caller) {
    caller = new Caller();
    this.callers[ruleId] = caller;
    var callContext = new Context(caller, null);
    var callFrame = new Frame(callContext);
    var states = ruleInitialStates[ruleId];

    for (var i = 0; i < states.length; i++) {
      var state = states[i];
      state.p(this, callFrame);
    }

    addNextFrame(this, callFrame);
  }

  return caller;
};

Step.prototype.returnCall = function returnCall(ruleId, frame) {
  // TODO: Implement proper grouping
  var caller = frame.context.caller;
  var returns = caller.returns;

  for (var i = 0; i < returns.length; i++) {
    var ret = returns[i];
    var callerContext = ret[0];
    var state = ret[1];
    var leftMarks = callerContext.marks;
    var rightMarks = frame.context.marks;
    var marks = leftMarks && rightMarks ? {
      type: "concat",
      left: callerContext.marks,
      right: frame.context.marks
    } : leftMarks || rightMarks;
    var context = new Context(callerContext.caller, marks);
    var nextFrame = new Frame(context);
    state.p(this, nextFrame);
    addNextFrame(this, nextFrame);
  }
};

function Caller() {
  this.returns = [];
}

Caller.prototype.addReturn = function (context, nextState) {
  this.returns.push([context, nextState]);
};

function Context(caller, marks) {
  this.caller = caller;
  this.marks = marks;
}

function Frame(context) {
  this.context = context;
  this.nextStates = [];
}

Frame.prototype.addNextState = function addNextState(state) {
  this.nextStates.push(state);
};

Frame.prototype.eachNextState = function eachNextState(fn) {
  this.nextStates.forEach(fn);
};

Frame.prototype.hasNextStates = function hasNextStates() {
  return this.nextStates.length > 0;
};

Frame.prototype.copy = function copy() {
  return new Frame(this.context, this.marks);
};

function processToken(token, position, frames) {
  var step = new Step(token, position);

  for (var i = 0; i < frames.length; i++) {
    var frame = frames[i];
    processFrame(step, frame);
  }

  return step;
}

function processFrame(step, frame) {
  var newFrame = frame.copy();
  frame.eachNextState(function (state) {
    state.p(step, newFrame);
  });
  addNextFrame(step, newFrame);
}

function addNextFrame(step, frame) {
  if (frame.hasNextStates()) {
    step.addNextFrame(frame);
  }
}

function flattenMarks(marks) {
  if (!marks) return [];
  var queue = [marks];
  var result = [];

  while (queue.length) {
    var m = queue.shift();

    if (m.type === "concat") {
      queue.unshift(m.left, m.right);
    } else if (m.type === "mark") {
      result.push(m);
    } else {
      throw new Error("unknown mark type: " + m.type);
    }
  }

  return result;
}

function parse(input) {
  var frames = initialFrames;
  var i = 0;

  for (; i < input.length; i++) {
    var token = input.charCodeAt(i);
    var step = processToken(token, i, frames);

    if (!step.hasNextFrames()) {
      return {
        type: "error",
        position: i
      };
    }

    frames = step.nextFrames;
  }

  step = processToken(null, i, frames);

  if (!step.wasAccepted()) {
    return {
      type: "error",
      position: i
    };
  }

  var ctx = step.acceptedContexts[0];
  var marks = flattenMarks(ctx.marks);
  return {
    type: "success",
    marks: marks
  };
}

var state0 = /*#__PURE__*/new State();
var state1 = /*#__PURE__*/new State();
var state2 = /*#__PURE__*/new State();
var state3 = /*#__PURE__*/new State();
var state4 = /*#__PURE__*/new State();
var state5 = /*#__PURE__*/new State();
var state6 = /*#__PURE__*/new State();
var state7 = /*#__PURE__*/new State();
var state8 = /*#__PURE__*/new State();
var state9 = /*#__PURE__*/new State();
var state10 = /*#__PURE__*/new State();
var state11 = /*#__PURE__*/new State();
var state12 = /*#__PURE__*/new State();
var state13 = /*#__PURE__*/new State();
var state14 = /*#__PURE__*/new State();
var state15 = /*#__PURE__*/new State();
var state16 = /*#__PURE__*/new State();
var state17 = /*#__PURE__*/new State();
var state18 = /*#__PURE__*/new State();
var state19 = /*#__PURE__*/new State();
var state20 = /*#__PURE__*/new State();
var state21 = /*#__PURE__*/new State();
var state22 = /*#__PURE__*/new State();
var state23 = /*#__PURE__*/new State();
var state24 = /*#__PURE__*/new State();
var state25 = /*#__PURE__*/new State();
var state26 = /*#__PURE__*/new State();
var state27 = /*#__PURE__*/new State();
var state28 = /*#__PURE__*/new State();
var state29 = /*#__PURE__*/new State();
var state30 = /*#__PURE__*/new State();
var state31 = /*#__PURE__*/new State();
var state32 = /*#__PURE__*/new State();
var state33 = /*#__PURE__*/new State();
var state34 = /*#__PURE__*/new State();
var state35 = /*#__PURE__*/new State();
var state36 = /*#__PURE__*/new State();
var state37 = /*#__PURE__*/new State();
var state38 = /*#__PURE__*/new State();
var state39 = /*#__PURE__*/new State();
var state40 = /*#__PURE__*/new State();
var state41 = /*#__PURE__*/new State();
var state42 = /*#__PURE__*/new State();
var state43 = /*#__PURE__*/new State();
var state44 = /*#__PURE__*/new State();
var state45 = /*#__PURE__*/new State();
var state46 = /*#__PURE__*/new State();
var state47 = /*#__PURE__*/new State();
var state48 = /*#__PURE__*/new State();
var state49 = /*#__PURE__*/new State();
var state50 = /*#__PURE__*/new State();
var state51 = /*#__PURE__*/new State();
var state52 = /*#__PURE__*/new State();
var state53 = /*#__PURE__*/new State();
var state54 = /*#__PURE__*/new State();
var state55 = /*#__PURE__*/new State();
var state56 = /*#__PURE__*/new State();
var state57 = /*#__PURE__*/new State();
var state58 = /*#__PURE__*/new State();
var state59 = /*#__PURE__*/new State();
var state60 = /*#__PURE__*/new State();
var state61 = /*#__PURE__*/new State();
var state62 = /*#__PURE__*/new State();
var state63 = /*#__PURE__*/new State();
var state64 = /*#__PURE__*/new State();
var state65 = /*#__PURE__*/new State();
var state66 = /*#__PURE__*/new State();
var state67 = /*#__PURE__*/new State();
var state68 = /*#__PURE__*/new State();
var state69 = /*#__PURE__*/new State();
var state70 = /*#__PURE__*/new State();
var state71 = /*#__PURE__*/new State();
var state72 = /*#__PURE__*/new State();
var state73 = /*#__PURE__*/new State();
var state74 = /*#__PURE__*/new State();
var state75 = /*#__PURE__*/new State();
var state76 = /*#__PURE__*/new State();
var state77 = /*#__PURE__*/new State();
var state78 = /*#__PURE__*/new State();
var state79 = /*#__PURE__*/new State();
var state80 = /*#__PURE__*/new State();
var state81 = /*#__PURE__*/new State();
var state82 = /*#__PURE__*/new State();
var state83 = /*#__PURE__*/new State();
var state84 = /*#__PURE__*/new State();
var state85 = /*#__PURE__*/new State();
var state86 = /*#__PURE__*/new State();
var state87 = /*#__PURE__*/new State();
var state88 = /*#__PURE__*/new State();
var state89 = /*#__PURE__*/new State();
var state90 = /*#__PURE__*/new State();
var state91 = /*#__PURE__*/new State();
var state92 = /*#__PURE__*/new State();
var state93 = /*#__PURE__*/new State();
var state94 = /*#__PURE__*/new State();
var state95 = /*#__PURE__*/new State();
var state96 = /*#__PURE__*/new State();
var state97 = /*#__PURE__*/new State();
var state98 = /*#__PURE__*/new State();
var state99 = /*#__PURE__*/new State();
var state100 = /*#__PURE__*/new State();
var state101 = /*#__PURE__*/new State();
var state102 = /*#__PURE__*/new State();
var state103 = /*#__PURE__*/new State();
var state104 = /*#__PURE__*/new State();
var state105 = /*#__PURE__*/new State();
var state106 = /*#__PURE__*/new State();
var state107 = /*#__PURE__*/new State();
var state108 = /*#__PURE__*/new State();
var state109 = /*#__PURE__*/new State();
var state110 = /*#__PURE__*/new State();
var state111 = /*#__PURE__*/new State();
var state112 = /*#__PURE__*/new State();
var state113 = /*#__PURE__*/new State();
var state114 = /*#__PURE__*/new State();
var state115 = /*#__PURE__*/new State();
var state116 = /*#__PURE__*/new State();
var state117 = /*#__PURE__*/new State();
var state118 = /*#__PURE__*/new State();
var state119 = /*#__PURE__*/new State();
var state120 = /*#__PURE__*/new State();
var state121 = /*#__PURE__*/new State();
var state122 = /*#__PURE__*/new State();
var state123 = /*#__PURE__*/new State();
var state124 = /*#__PURE__*/new State();
var state125 = /*#__PURE__*/new State();
var state126 = /*#__PURE__*/new State();
var state127 = /*#__PURE__*/new State();
var state128 = /*#__PURE__*/new State();
var state129 = /*#__PURE__*/new State();
var state130 = /*#__PURE__*/new State();
var state131 = /*#__PURE__*/new State();
var state132 = /*#__PURE__*/new State();
var state133 = /*#__PURE__*/new State();
var state134 = /*#__PURE__*/new State();
var state135 = /*#__PURE__*/new State();
var state136 = /*#__PURE__*/new State();
var state137 = /*#__PURE__*/new State();
var state138 = /*#__PURE__*/new State();
var state139 = /*#__PURE__*/new State();
var state140 = /*#__PURE__*/new State();
var state141 = /*#__PURE__*/new State();
var state142 = /*#__PURE__*/new State();
var state143 = /*#__PURE__*/new State();
var state144 = /*#__PURE__*/new State();
var state145 = /*#__PURE__*/new State();
var state146 = /*#__PURE__*/new State();
var state147 = /*#__PURE__*/new State();
var state148 = /*#__PURE__*/new State();
var state149 = /*#__PURE__*/new State();
var state150 = /*#__PURE__*/new State();
var state151 = /*#__PURE__*/new State();
var state152 = /*#__PURE__*/new State();
var state153 = /*#__PURE__*/new State();
var state154 = /*#__PURE__*/new State();
var state155 = /*#__PURE__*/new State();
var state156 = /*#__PURE__*/new State();
var state157 = /*#__PURE__*/new State();
var state158 = /*#__PURE__*/new State();
var state159 = /*#__PURE__*/new State();
var state160 = /*#__PURE__*/new State();
var state161 = /*#__PURE__*/new State();
var state162 = /*#__PURE__*/new State();
var state163 = /*#__PURE__*/new State();
var state164 = /*#__PURE__*/new State();
var state165 = /*#__PURE__*/new State();
var state166 = /*#__PURE__*/new State();
var state167 = /*#__PURE__*/new State();
var state168 = /*#__PURE__*/new State();
var state169 = /*#__PURE__*/new State();
var state170 = /*#__PURE__*/new State();
var state171 = /*#__PURE__*/new State();
var state172 = /*#__PURE__*/new State();
var state173 = /*#__PURE__*/new State();
var state174 = /*#__PURE__*/new State();
var state175 = /*#__PURE__*/new State();
var state176 = /*#__PURE__*/new State();
var state177 = /*#__PURE__*/new State();
var state178 = /*#__PURE__*/new State();
var state179 = /*#__PURE__*/new State();
var state180 = /*#__PURE__*/new State();
var state181 = /*#__PURE__*/new State();
var state182 = /*#__PURE__*/new State();
var state183 = /*#__PURE__*/new State();
var state184 = /*#__PURE__*/new State();
var state185 = /*#__PURE__*/new State();
var state186 = /*#__PURE__*/new State();
var state187 = /*#__PURE__*/new State();
var state188 = /*#__PURE__*/new State();
var state189 = /*#__PURE__*/new State();
var state190 = /*#__PURE__*/new State();
var state191 = /*#__PURE__*/new State();
var state192 = /*#__PURE__*/new State();
var state193 = /*#__PURE__*/new State();
var state194 = /*#__PURE__*/new State();
var state195 = /*#__PURE__*/new State();
var state196 = /*#__PURE__*/new State();
var state197 = /*#__PURE__*/new State();
var state198 = /*#__PURE__*/new State();
var state199 = /*#__PURE__*/new State();
var state200 = /*#__PURE__*/new State();
var state201 = /*#__PURE__*/new State();
var state202 = /*#__PURE__*/new State();
var state203 = /*#__PURE__*/new State();
var state204 = /*#__PURE__*/new State();
var state205 = /*#__PURE__*/new State();
var state206 = /*#__PURE__*/new State();
var state207 = /*#__PURE__*/new State();
var state208 = /*#__PURE__*/new State();
var state209 = /*#__PURE__*/new State();
var state210 = /*#__PURE__*/new State();
var state211 = /*#__PURE__*/new State();
var state212 = /*#__PURE__*/new State();
var state213 = /*#__PURE__*/new State();
var state214 = /*#__PURE__*/new State();
var state215 = /*#__PURE__*/new State();
var state216 = /*#__PURE__*/new State();
var state217 = /*#__PURE__*/new State();
var state218 = /*#__PURE__*/new State();
var state219 = /*#__PURE__*/new State();
var state220 = /*#__PURE__*/new State();
var state221 = /*#__PURE__*/new State();
var state222 = /*#__PURE__*/new State();
var state223 = /*#__PURE__*/new State();
var state224 = /*#__PURE__*/new State();
var state225 = /*#__PURE__*/new State();
var state226 = /*#__PURE__*/new State();
var state227 = /*#__PURE__*/new State();
var state228 = /*#__PURE__*/new State();
var state229 = /*#__PURE__*/new State();
var state230 = /*#__PURE__*/new State();
var state231 = /*#__PURE__*/new State();
var state232 = /*#__PURE__*/new State();
var state233 = /*#__PURE__*/new State();
var state234 = /*#__PURE__*/new State();
var state235 = /*#__PURE__*/new State();
var state236 = /*#__PURE__*/new State();
var state237 = /*#__PURE__*/new State();
var state238 = /*#__PURE__*/new State();
var state239 = /*#__PURE__*/new State();
var state240 = /*#__PURE__*/new State();
var state241 = /*#__PURE__*/new State();
var state242 = /*#__PURE__*/new State();
var state243 = /*#__PURE__*/new State();
var state244 = /*#__PURE__*/new State();
var state245 = /*#__PURE__*/new State();
var state246 = /*#__PURE__*/new State();
var state247 = /*#__PURE__*/new State();
var state248 = /*#__PURE__*/new State();
var state249 = /*#__PURE__*/new State();
var state250 = /*#__PURE__*/new State();
var state251 = /*#__PURE__*/new State();
var state252 = /*#__PURE__*/new State();
var state253 = /*#__PURE__*/new State();
var state254 = /*#__PURE__*/new State();
var state255 = /*#__PURE__*/new State();
var state256 = /*#__PURE__*/new State();
var state257 = /*#__PURE__*/new State();
var state258 = /*#__PURE__*/new State();
var state259 = /*#__PURE__*/new State();
var state260 = /*#__PURE__*/new State();
var state261 = /*#__PURE__*/new State();
var state262 = /*#__PURE__*/new State();
var state263 = /*#__PURE__*/new State();
var state264 = /*#__PURE__*/new State();
var state265 = /*#__PURE__*/new State();
var state266 = /*#__PURE__*/new State();
var state267 = /*#__PURE__*/new State();
var state268 = /*#__PURE__*/new State();
var state269 = /*#__PURE__*/new State();
var state270 = /*#__PURE__*/new State();
var state271 = /*#__PURE__*/new State();
var state272 = /*#__PURE__*/new State();
var state273 = /*#__PURE__*/new State();
var state274 = /*#__PURE__*/new State();
var state275 = /*#__PURE__*/new State();
var state276 = /*#__PURE__*/new State();
var state277 = /*#__PURE__*/new State();
var state278 = /*#__PURE__*/new State();
var state279 = /*#__PURE__*/new State();
var state280 = /*#__PURE__*/new State();
var state281 = /*#__PURE__*/new State();
var state282 = /*#__PURE__*/new State();
var state283 = /*#__PURE__*/new State();
var state284 = /*#__PURE__*/new State();
var state285 = /*#__PURE__*/new State();
var state286 = /*#__PURE__*/new State();
var state287 = /*#__PURE__*/new State();
var state288 = /*#__PURE__*/new State();
var state289 = /*#__PURE__*/new State();
var state290 = /*#__PURE__*/new State();
var state291 = /*#__PURE__*/new State();
var state292 = /*#__PURE__*/new State();
var state293 = /*#__PURE__*/new State();
var state294 = /*#__PURE__*/new State();
var state295 = /*#__PURE__*/new State();
var state296 = /*#__PURE__*/new State();
var state297 = /*#__PURE__*/new State();
var state298 = /*#__PURE__*/new State();
var state299 = /*#__PURE__*/new State();
var state300 = /*#__PURE__*/new State();
var state301 = /*#__PURE__*/new State();
var state302 = /*#__PURE__*/new State();
var state303 = /*#__PURE__*/new State();
var state304 = /*#__PURE__*/new State();
var state305 = /*#__PURE__*/new State();
var state306 = /*#__PURE__*/new State();
var state307 = /*#__PURE__*/new State();
var state308 = /*#__PURE__*/new State();
var state309 = /*#__PURE__*/new State();
var state310 = /*#__PURE__*/new State();
var state311 = /*#__PURE__*/new State();
var state312 = /*#__PURE__*/new State();
var state313 = /*#__PURE__*/new State();
var state314 = /*#__PURE__*/new State();
var state315 = /*#__PURE__*/new State();
var state316 = /*#__PURE__*/new State();
var state317 = /*#__PURE__*/new State();
var state318 = /*#__PURE__*/new State();
var state319 = /*#__PURE__*/new State();
var state320 = /*#__PURE__*/new State();
var state321 = /*#__PURE__*/new State();
var state322 = /*#__PURE__*/new State();
var state323 = /*#__PURE__*/new State();
var state324 = /*#__PURE__*/new State();
var state325 = /*#__PURE__*/new State();
var state326 = /*#__PURE__*/new State();
var state327 = /*#__PURE__*/new State();
var state328 = /*#__PURE__*/new State();
var state329 = /*#__PURE__*/new State();
var state330 = /*#__PURE__*/new State();
var state331 = /*#__PURE__*/new State();
var state332 = /*#__PURE__*/new State();
var state333 = /*#__PURE__*/new State();
var state334 = /*#__PURE__*/new State();
var state335 = /*#__PURE__*/new State();
var state336 = /*#__PURE__*/new State();
var state337 = /*#__PURE__*/new State();
var state338 = /*#__PURE__*/new State();
var state339 = /*#__PURE__*/new State();
var state340 = /*#__PURE__*/new State();
var state341 = /*#__PURE__*/new State();
var state342 = /*#__PURE__*/new State();
var state343 = /*#__PURE__*/new State();
var state344 = /*#__PURE__*/new State();
var state345 = /*#__PURE__*/new State();
var state346 = /*#__PURE__*/new State();
var state347 = /*#__PURE__*/new State();
var state348 = /*#__PURE__*/new State();
var state349 = /*#__PURE__*/new State();
var state350 = /*#__PURE__*/new State();
var state351 = /*#__PURE__*/new State();
var state352 = /*#__PURE__*/new State();
var state353 = /*#__PURE__*/new State();
var state354 = /*#__PURE__*/new State();
var state355 = /*#__PURE__*/new State();
var state356 = /*#__PURE__*/new State();
var state357 = /*#__PURE__*/new State();
var state358 = /*#__PURE__*/new State();
var state359 = /*#__PURE__*/new State();
var state360 = /*#__PURE__*/new State();
var state361 = /*#__PURE__*/new State();
var state362 = /*#__PURE__*/new State();
var state363 = /*#__PURE__*/new State();
var state364 = /*#__PURE__*/new State();
var state365 = /*#__PURE__*/new State();
var state366 = /*#__PURE__*/new State();
var state367 = /*#__PURE__*/new State();
var state368 = /*#__PURE__*/new State();
var state369 = /*#__PURE__*/new State();
var state370 = /*#__PURE__*/new State();
var state371 = /*#__PURE__*/new State();
var state372 = /*#__PURE__*/new State();
var state373 = /*#__PURE__*/new State();
var state374 = /*#__PURE__*/new State();
var state375 = /*#__PURE__*/new State();
var state376 = /*#__PURE__*/new State();
var state377 = /*#__PURE__*/new State();
var state378 = /*#__PURE__*/new State();

state0.p = function (step, frame) {
  step.startCall("main").addReturn(frame.context, state1);
};

state0.id = 0;

state1.p = function (step, frame) {
  step.addAccept(frame.context);
};

state1.id = 1;

state2.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state3);
  step.startCall("EXPR^1").addReturn(frame.context, state4);
};

state2.id = 2;

state3.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state3);
  step.startCall("EXPR^1").addReturn(frame.context, state4);
};

state3.id = 3;

state4.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state5);
  step.returnCall("main", frame);
};

state4.id = 4;

state5.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state5);
  step.returnCall("main", frame);
};

state5.id = 5;

state6.p = function (step, frame) {
  var token = step.token;

  if (token === 9) {
    frame.addNextState(state7);
  }

  if (token === 10) {
    frame.addNextState(state8);
  }

  if (token === 11) {
    frame.addNextState(state9);
  }

  if (token === 12) {
    frame.addNextState(state10);
  }

  if (token === 13) {
    frame.addNextState(state11);
  }

  if (token === 32) {
    frame.addNextState(state12);
  }

  if (token === 133) {
    frame.addNextState(state13);
  }

  if (token === 160) {
    frame.addNextState(state14);
  }
};

state6.id = 6;

state7.p = function (step, frame) {
  step.returnCall("SPACE", frame);
};

state7.id = 7;

state8.p = function (step, frame) {
  step.returnCall("SPACE", frame);
};

state8.id = 8;

state9.p = function (step, frame) {
  step.returnCall("SPACE", frame);
};

state9.id = 9;

state10.p = function (step, frame) {
  step.returnCall("SPACE", frame);
};

state10.id = 10;

state11.p = function (step, frame) {
  step.returnCall("SPACE", frame);
};

state11.id = 11;

state12.p = function (step, frame) {
  step.returnCall("SPACE", frame);
};

state12.id = 12;

state13.p = function (step, frame) {
  step.returnCall("SPACE", frame);
};

state13.id = 13;

state14.p = function (step, frame) {
  step.returnCall("SPACE", frame);
};

state14.id = 14;

state15.p = function (step, frame) {
  var token = step.token;

  if (token === 47) {
    frame.addNextState(state16);
  }
};

state15.id = 15;

state16.p = function (step, frame) {
  var token = step.token;

  if (token === 47) {
    frame.addNextState(state17);
  }
};

state16.id = 16;

state17.p = function (step, frame) {
  var token = step.token;

  if (token <= 9) {
    frame.addNextState(state18);
  }

  if (token >= 11) {
    frame.addNextState(state19);
  }
};

state17.id = 17;

state18.p = function (step, frame) {
  var token = step.token;

  if (token <= 9) {
    frame.addNextState(state18);
  }

  if (token >= 11) {
    frame.addNextState(state19);
  }

  step.startCall("COMMENT_END").addReturn(frame.context, state20);
};

state18.id = 18;

state19.p = function (step, frame) {
  var token = step.token;

  if (token <= 9) {
    frame.addNextState(state18);
  }

  if (token >= 11) {
    frame.addNextState(state19);
  }

  step.startCall("COMMENT_END").addReturn(frame.context, state20);
};

state19.id = 19;

state20.p = function (step, frame) {
  step.returnCall("COMMENT", frame);
};

state20.id = 20;

state21.p = function (step, frame) {
  var token = step.token;

  if (token === 10) {
    frame.addNextState(state22);
  }
};

state21.id = 21;

state22.p = function (step, frame) {
  step.returnCall("COMMENT_END", frame);
};

state22.id = 22;

state23.p = function (step, frame) {
  step.startCall("SPACE").addReturn(frame.context, state24);
  step.startCall("COMMENT").addReturn(frame.context, state25);
};

state23.id = 23;

state24.p = function (step, frame) {
  step.returnCall("IGN", frame);
};

state24.id = 24;

state25.p = function (step, frame) {
  step.returnCall("IGN", frame);
};

state25.id = 25;

state26.p = function (step, frame) {
  var token = step.token;

  if (token === 124) {
    frame.addNextState(state27);
  }
};

state26.id = 26;

state27.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state28);
  step.returnCall("PIPE", frame);
};

state27.id = 27;

state28.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state28);
  step.returnCall("PIPE", frame);
};

state28.id = 28;

state29.p = function (step, frame) {
  step.addMark("parent", frame.context, state30);
  step.addMark("dblparent", frame.context, state31);
};

state29.id = 29;

state30.p = function (step, frame) {
  var token = step.token;

  if (token === 94) {
    frame.addNextState(state32);
  }
};

state30.id = 30;

state31.p = function (step, frame) {
  step.startCall("PARENT").addReturn(frame.context, state33);
};

state31.id = 31;

state32.p = function (step, frame) {
  step.returnCall("PARENT", frame);
};

state32.id = 32;

state33.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state34);
  }
};

state33.id = 33;

state34.p = function (step, frame) {
  var token = step.token;

  if (token === 94) {
    frame.addNextState(state35);
  }
};

state34.id = 34;

state35.p = function (step, frame) {
  step.returnCall("PARENT", frame);
};

state35.id = 35;

state36.p = function (step, frame) {
  var token = step.token;

  if (token >= 97 && token <= 122) {
    frame.addNextState(state37);
  }

  if (token >= 65 && token <= 90) {
    frame.addNextState(state38);
  }

  if (token === 95) {
    frame.addNextState(state39);
  }
};

state36.id = 36;

state37.p = function (step, frame) {
  step.returnCall("IDENT_FST", frame);
};

state37.id = 37;

state38.p = function (step, frame) {
  step.returnCall("IDENT_FST", frame);
};

state38.id = 38;

state39.p = function (step, frame) {
  step.returnCall("IDENT_FST", frame);
};

state39.id = 39;

state40.p = function (step, frame) {
  var token = step.token;
  step.startCall("IDENT_FST").addReturn(frame.context, state41);

  if (token >= 48 && token <= 57) {
    frame.addNextState(state42);
  }
};

state40.id = 40;

state41.p = function (step, frame) {
  step.returnCall("IDENT_REST", frame);
};

state41.id = 41;

state42.p = function (step, frame) {
  step.returnCall("IDENT_REST", frame);
};

state42.id = 42;

state43.p = function (step, frame) {
  step.startCall("IDENT_FST").addReturn(frame.context, state44);
};

state43.id = 43;

state44.p = function (step, frame) {
  var token = step.token;
  step.startCall("IDENT_REST").addReturn(frame.context, state45);
  if ((token <= 96 || token >= 123) && (token <= 64 || token >= 91) && (token <= 47 || token >= 58)) step.returnCall("IDENT", frame);
};

state44.id = 44;

state45.p = function (step, frame) {
  var token = step.token;
  step.startCall("IDENT_REST").addReturn(frame.context, state45);
  if ((token <= 96 || token >= 123) && (token <= 64 || token >= 91) && (token <= 47 || token >= 58)) step.returnCall("IDENT", frame);
};

state45.id = 45;

state46.p = function (step, frame) {
  var token = step.token;

  if (token === 42) {
    frame.addNextState(state47);
  }
};

state46.id = 46;

state47.p = function (step, frame) {
  var token = step.token;
  if (token <= 41 || token >= 43) step.returnCall("STAR", frame);
};

state47.id = 47;

state48.p = function (step, frame) {
  var token = step.token;

  if (token === 61) {
    frame.addNextState(state49);
  }

  if (token === 33) {
    frame.addNextState(state50);
  }

  if (token === 62) {
    frame.addNextState(state51);
  }

  if (token === 62) {
    frame.addNextState(state52);
  }

  if (token === 60) {
    frame.addNextState(state53);
  }

  if (token === 60) {
    frame.addNextState(state54);
  }

  if (token === 105) {
    frame.addNextState(state55);
  }

  if (token === 109) {
    frame.addNextState(state56);
  }
};

state48.id = 48;

state49.p = function (step, frame) {
  var token = step.token;

  if (token === 61) {
    frame.addNextState(state57);
  }
};

state49.id = 49;

state50.p = function (step, frame) {
  var token = step.token;

  if (token === 61) {
    frame.addNextState(state58);
  }
};

state50.id = 50;

state51.p = function (step, frame) {
  var token = step.token;

  if (token === 61) {
    frame.addNextState(state59);
  }
};

state51.id = 51;

state52.p = function (step, frame) {
  step.returnCall("COMP_OP", frame);
};

state52.id = 52;

state53.p = function (step, frame) {
  var token = step.token;

  if (token === 61) {
    frame.addNextState(state60);
  }
};

state53.id = 53;

state54.p = function (step, frame) {
  step.returnCall("COMP_OP", frame);
};

state54.id = 54;

state55.p = function (step, frame) {
  var token = step.token;

  if (token === 110) {
    frame.addNextState(state61);
  }
};

state55.id = 55;

state56.p = function (step, frame) {
  var token = step.token;

  if (token === 97) {
    frame.addNextState(state62);
  }
};

state56.id = 56;

state57.p = function (step, frame) {
  step.returnCall("COMP_OP", frame);
};

state57.id = 57;

state58.p = function (step, frame) {
  step.returnCall("COMP_OP", frame);
};

state58.id = 58;

state59.p = function (step, frame) {
  step.returnCall("COMP_OP", frame);
};

state59.id = 59;

state60.p = function (step, frame) {
  step.returnCall("COMP_OP", frame);
};

state60.id = 60;

state61.p = function (step, frame) {
  step.returnCall("COMP_OP", frame);
};

state61.id = 61;

state62.p = function (step, frame) {
  var token = step.token;

  if (token === 116) {
    frame.addNextState(state63);
  }
};

state62.id = 62;

state63.p = function (step, frame) {
  var token = step.token;

  if (token === 99) {
    frame.addNextState(state64);
  }
};

state63.id = 63;

state64.p = function (step, frame) {
  var token = step.token;

  if (token === 104) {
    frame.addNextState(state65);
  }
};

state64.id = 64;

state65.p = function (step, frame) {
  step.returnCall("COMP_OP", frame);
};

state65.id = 65;

state66.p = function (step, frame) {
  step.addMark("func_call", frame.context, state67);
};

state66.id = 66;

state67.p = function (step, frame) {
  step.startCall("IDENT").addReturn(frame.context, state68);
};

state67.id = 67;

state68.p = function (step, frame) {
  step.addMark("func_name_end", frame.context, state69);
};

state68.id = 68;

state69.p = function (step, frame) {
  var token = step.token;

  if (token === 40) {
    frame.addNextState(state70);
  }
};

state69.id = 69;

state70.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state71);
  step.startCall("FUNC_ARGS").addReturn(frame.context, state72);
  step.addMark("func_args_end", frame.context, state73);
};

state70.id = 70;

state71.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state71);
  step.startCall("FUNC_ARGS").addReturn(frame.context, state72);
  step.addMark("func_args_end", frame.context, state73);
};

state71.id = 71;

state72.p = function (step, frame) {
  step.addMark("func_args_end", frame.context, state73);
};

state72.id = 72;

state73.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state74);

  if (token === 41) {
    frame.addNextState(state75);
  }
};

state73.id = 73;

state74.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state74);

  if (token === 41) {
    frame.addNextState(state75);
  }
};

state74.id = 74;

state75.p = function (step, frame) {
  step.returnCall("FUNC_CALL", frame);
};

state75.id = 75;

state76.p = function (step, frame) {
  step.startCall("EXPR^1").addReturn(frame.context, state77);
};

state76.id = 76;

state77.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state78);

  if (token === 44) {
    frame.addNextState(state80);
  }

  step.returnCall("FUNC_ARGS", frame);
};

state77.id = 77;

state78.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state78);

  if (token === 44) {
    frame.addNextState(state80);
  }

  step.returnCall("FUNC_ARGS", frame);
};

state78.id = 78;

state79.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state79);
  step.startCall("EXPR^1").addReturn(frame.context, state81);
};

state79.id = 79;

state80.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state79);
  step.startCall("EXPR^1").addReturn(frame.context, state81);
};

state80.id = 80;

state81.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state82);

  if (token === 44) {
    frame.addNextState(state80);
  }

  step.returnCall("FUNC_ARGS", frame);
};

state81.id = 81;

state82.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state82);

  if (token === 44) {
    frame.addNextState(state80);
  }

  step.returnCall("FUNC_ARGS", frame);
};

state82.id = 82;

state83.p = function (step, frame) {
  step.addMark("sci", frame.context, state84);
  step.addMark("float", frame.context, state85);
  step.addMark("integer", frame.context, state86);
};

state83.id = 83;

state84.p = function (step, frame) {
  step.startCall("DIGIT").addReturn(frame.context, state87);
};

state84.id = 84;

state85.p = function (step, frame) {
  step.startCall("DIGIT").addReturn(frame.context, state95);
};

state85.id = 85;

state86.p = function (step, frame) {
  step.startCall("DIGIT").addReturn(frame.context, state99);
};

state86.id = 86;

state87.p = function (step, frame) {
  var token = step.token;
  step.startCall("DIGIT").addReturn(frame.context, state87);

  if (token === 46) {
    frame.addNextState(state89);
  }

  if (token === 101) {
    frame.addNextState(state90);
  }

  if (token === 69) {
    frame.addNextState(state91);
  }
};

state87.id = 87;

state88.p = function (step, frame) {
  var token = step.token;
  step.startCall("DIGIT").addReturn(frame.context, state88);

  if (token === 101) {
    frame.addNextState(state90);
  }

  if (token === 69) {
    frame.addNextState(state91);
  }
};

state88.id = 88;

state89.p = function (step, frame) {
  step.startCall("DIGIT").addReturn(frame.context, state88);
};

state89.id = 89;

state90.p = function (step, frame) {
  step.startCall("SIGN").addReturn(frame.context, state92);
  step.startCall("DIGIT").addReturn(frame.context, state93);
};

state90.id = 90;

state91.p = function (step, frame) {
  step.startCall("SIGN").addReturn(frame.context, state92);
  step.startCall("DIGIT").addReturn(frame.context, state93);
};

state91.id = 91;

state92.p = function (step, frame) {
  step.startCall("DIGIT").addReturn(frame.context, state93);
};

state92.id = 92;

state93.p = function (step, frame) {
  step.startCall("DIGIT").addReturn(frame.context, state93);
  step.addMark("sci_end", frame.context, state94);
};

state93.id = 93;

state94.p = function (step, frame) {
  step.returnCall("NUMBER", frame);
};

state94.id = 94;

state95.p = function (step, frame) {
  var token = step.token;
  step.startCall("DIGIT").addReturn(frame.context, state95);

  if (token === 46) {
    frame.addNextState(state96);
  }
};

state95.id = 95;

state96.p = function (step, frame) {
  step.startCall("DIGIT").addReturn(frame.context, state97);
};

state96.id = 96;

state97.p = function (step, frame) {
  step.startCall("DIGIT").addReturn(frame.context, state97);
  step.addMark("float_end", frame.context, state98);
};

state97.id = 97;

state98.p = function (step, frame) {
  step.returnCall("NUMBER", frame);
};

state98.id = 98;

state99.p = function (step, frame) {
  step.startCall("DIGIT").addReturn(frame.context, state99);
  step.addMark("integer_end", frame.context, state100);
};

state99.id = 99;

state100.p = function (step, frame) {
  step.returnCall("NUMBER", frame);
};

state100.id = 100;

state101.p = function (step, frame) {
  var token = step.token;

  if (token >= 48 && token <= 57) {
    frame.addNextState(state102);
  }
};

state101.id = 101;

state102.p = function (step, frame) {
  step.returnCall("DIGIT", frame);
};

state102.id = 102;

state103.p = function (step, frame) {
  var token = step.token;

  if (token === 43) {
    frame.addNextState(state104);
  }

  if (token === 45) {
    frame.addNextState(state105);
  }
};

state103.id = 103;

state104.p = function (step, frame) {
  step.returnCall("SIGN", frame);
};

state104.id = 104;

state105.p = function (step, frame) {
  step.returnCall("SIGN", frame);
};

state105.id = 105;

state106.p = function (step, frame) {
  var token = step.token;

  if (token === 34) {
    frame.addNextState(state107);
  }

  if (token === 39) {
    frame.addNextState(state108);
  }
};

state106.id = 106;

state107.p = function (step, frame) {
  step.addMark("str_begin", frame.context, state109);
};

state107.id = 107;

state108.p = function (step, frame) {
  step.addMark("str_begin", frame.context, state113);
};

state108.id = 108;

state109.p = function (step, frame) {
  step.startCall("DSTRING_CHAR").addReturn(frame.context, state110);
  step.addMark("str_end", frame.context, state111);
};

state109.id = 109;

state110.p = function (step, frame) {
  step.startCall("DSTRING_CHAR").addReturn(frame.context, state110);
  step.addMark("str_end", frame.context, state111);
};

state110.id = 110;

state111.p = function (step, frame) {
  var token = step.token;

  if (token === 34) {
    frame.addNextState(state112);
  }
};

state111.id = 111;

state112.p = function (step, frame) {
  step.returnCall("STRING", frame);
};

state112.id = 112;

state113.p = function (step, frame) {
  step.startCall("SSTRING_CHAR").addReturn(frame.context, state114);
  step.addMark("str_end", frame.context, state115);
};

state113.id = 113;

state114.p = function (step, frame) {
  step.startCall("SSTRING_CHAR").addReturn(frame.context, state114);
  step.addMark("str_end", frame.context, state115);
};

state114.id = 114;

state115.p = function (step, frame) {
  var token = step.token;

  if (token === 39) {
    frame.addNextState(state116);
  }
};

state115.id = 115;

state116.p = function (step, frame) {
  step.returnCall("STRING", frame);
};

state116.id = 116;

state117.p = function (step, frame) {
  var token = step.token;

  if (token === 92) {
    frame.addNextState(state118);
  }

  if ((token <= 33 || token >= 35) && (token <= 91 || token >= 93)) {
    frame.addNextState(state119);
  }
};

state117.id = 117;

state118.p = function (step, frame) {

  {
    frame.addNextState(state120);
  }
};

state118.id = 118;

state119.p = function (step, frame) {
  step.returnCall("DSTRING_CHAR", frame);
};

state119.id = 119;

state120.p = function (step, frame) {
  step.returnCall("DSTRING_CHAR", frame);
};

state120.id = 120;

state121.p = function (step, frame) {
  var token = step.token;

  if (token === 92) {
    frame.addNextState(state122);
  }

  if ((token <= 38 || token >= 40) && (token <= 91 || token >= 93)) {
    frame.addNextState(state123);
  }
};

state121.id = 121;

state122.p = function (step, frame) {

  {
    frame.addNextState(state124);
  }
};

state122.id = 122;

state123.p = function (step, frame) {
  step.returnCall("SSTRING_CHAR", frame);
};

state123.id = 123;

state124.p = function (step, frame) {
  step.returnCall("SSTRING_CHAR", frame);
};

state124.id = 124;

state125.p = function (step, frame) {
  step.addMark("array", frame.context, state126);
};

state125.id = 125;

state126.p = function (step, frame) {
  var token = step.token;

  if (token === 91) {
    frame.addNextState(state127);
  }
};

state126.id = 126;

state127.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state128);
  step.startCall("ARRAY_ELEMENT").addReturn(frame.context, state130);

  if (token === 93) {
    frame.addNextState(state137);
  }
};

state127.id = 127;

state128.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state128);
  step.startCall("ARRAY_ELEMENT").addReturn(frame.context, state130);

  if (token === 93) {
    frame.addNextState(state137);
  }
};

state128.id = 128;

state129.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state129);

  if (token === 44) {
    frame.addNextState(state132);
  }

  if (token === 44) {
    frame.addNextState(state136);
  }

  if (token === 93) {
    frame.addNextState(state137);
  }
};

state129.id = 129;

state130.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state129);

  if (token === 44) {
    frame.addNextState(state132);
  }

  if (token === 44) {
    frame.addNextState(state136);
  }

  if (token === 93) {
    frame.addNextState(state137);
  }
};

state130.id = 130;

state131.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state131);
  step.startCall("ARRAY_ELEMENT").addReturn(frame.context, state133);
};

state131.id = 131;

state132.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state131);
  step.startCall("ARRAY_ELEMENT").addReturn(frame.context, state133);
};

state132.id = 132;

state133.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state134);

  if (token === 44) {
    frame.addNextState(state132);
  }

  if (token === 44) {
    frame.addNextState(state136);
  }

  if (token === 93) {
    frame.addNextState(state137);
  }
};

state133.id = 133;

state134.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state134);

  if (token === 44) {
    frame.addNextState(state132);
  }

  if (token === 44) {
    frame.addNextState(state136);
  }

  if (token === 93) {
    frame.addNextState(state137);
  }
};

state134.id = 134;

state135.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state135);

  if (token === 93) {
    frame.addNextState(state137);
  }
};

state135.id = 135;

state136.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state135);

  if (token === 93) {
    frame.addNextState(state137);
  }
};

state136.id = 136;

state137.p = function (step, frame) {
  step.addMark("array_end", frame.context, state138);
};

state137.id = 137;

state138.p = function (step, frame) {
  step.returnCall("ARRAY", frame);
};

state138.id = 138;

state139.p = function (step, frame) {
  step.addMark("array_splat", frame.context, state140);
  step.startCall("EXPR^1").addReturn(frame.context, state141);
};

state139.id = 139;

state140.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state142);
  }
};

state140.id = 140;

state141.p = function (step, frame) {
  step.returnCall("ARRAY_ELEMENT", frame);
};

state141.id = 141;

state142.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state143);
  }
};

state142.id = 142;

state143.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state144);
  }
};

state143.id = 143;

state144.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state145);
  step.startCall("EXPR^1").addReturn(frame.context, state141);
};

state144.id = 144;

state145.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state145);
  step.startCall("EXPR^1").addReturn(frame.context, state141);
};

state145.id = 145;

state146.p = function (step, frame) {
  step.addMark("object", frame.context, state147);
};

state146.id = 146;

state147.p = function (step, frame) {
  var token = step.token;

  if (token === 123) {
    frame.addNextState(state148);
  }
};

state147.id = 147;

state148.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state149);
  step.startCall("OBJECT_PAIR").addReturn(frame.context, state151);

  if (token === 125) {
    frame.addNextState(state158);
  }
};

state148.id = 148;

state149.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state149);
  step.startCall("OBJECT_PAIR").addReturn(frame.context, state151);

  if (token === 125) {
    frame.addNextState(state158);
  }
};

state149.id = 149;

state150.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state150);

  if (token === 44) {
    frame.addNextState(state153);
  }

  if (token === 44) {
    frame.addNextState(state157);
  }

  if (token === 125) {
    frame.addNextState(state158);
  }
};

state150.id = 150;

state151.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state150);

  if (token === 44) {
    frame.addNextState(state153);
  }

  if (token === 44) {
    frame.addNextState(state157);
  }

  if (token === 125) {
    frame.addNextState(state158);
  }
};

state151.id = 151;

state152.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state152);
  step.startCall("OBJECT_PAIR").addReturn(frame.context, state154);
};

state152.id = 152;

state153.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state152);
  step.startCall("OBJECT_PAIR").addReturn(frame.context, state154);
};

state153.id = 153;

state154.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state155);

  if (token === 44) {
    frame.addNextState(state153);
  }

  if (token === 44) {
    frame.addNextState(state157);
  }

  if (token === 125) {
    frame.addNextState(state158);
  }
};

state154.id = 154;

state155.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state155);

  if (token === 44) {
    frame.addNextState(state153);
  }

  if (token === 44) {
    frame.addNextState(state157);
  }

  if (token === 125) {
    frame.addNextState(state158);
  }
};

state155.id = 155;

state156.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state156);

  if (token === 125) {
    frame.addNextState(state158);
  }
};

state156.id = 156;

state157.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state156);

  if (token === 125) {
    frame.addNextState(state158);
  }
};

state157.id = 157;

state158.p = function (step, frame) {
  step.addMark("object_end", frame.context, state159);
};

state158.id = 158;

state159.p = function (step, frame) {
  step.returnCall("OBJECT", frame);
};

state159.id = 159;

state160.p = function (step, frame) {
  step.addMark("object_pair", frame.context, state161);
  step.addMark("object_expr", frame.context, state162);
  step.addMark("object_splat_this", frame.context, state163);
  step.addMark("object_splat", frame.context, state164);
};

state160.id = 160;

state161.p = function (step, frame) {
  step.startCall("STRING").addReturn(frame.context, state165);
};

state161.id = 161;

state162.p = function (step, frame) {
  step.startCall("EXPR^1").addReturn(frame.context, state170);
};

state162.id = 162;

state163.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state171);
  }
};

state163.id = 163;

state164.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state174);
  }
};

state164.id = 164;

state165.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state166);

  if (token === 58) {
    frame.addNextState(state167);
  }
};

state165.id = 165;

state166.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state166);

  if (token === 58) {
    frame.addNextState(state167);
  }
};

state166.id = 166;

state167.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state168);
  step.startCall("EXPR^1").addReturn(frame.context, state169);
};

state167.id = 167;

state168.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state168);
  step.startCall("EXPR^1").addReturn(frame.context, state169);
};

state168.id = 168;

state169.p = function (step, frame) {
  step.returnCall("OBJECT_PAIR", frame);
};

state169.id = 169;

state170.p = function (step, frame) {
  step.returnCall("OBJECT_PAIR", frame);
};

state170.id = 170;

state171.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state172);
  }
};

state171.id = 171;

state172.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state173);
  }
};

state172.id = 172;

state173.p = function (step, frame) {
  step.returnCall("OBJECT_PAIR", frame);
};

state173.id = 173;

state174.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state175);
  }
};

state174.id = 174;

state175.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state176);
  }
};

state175.id = 175;

state176.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state177);
  step.startCall("EXPR^1").addReturn(frame.context, state178);
};

state176.id = 176;

state177.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state177);
  step.startCall("EXPR^1").addReturn(frame.context, state178);
};

state177.id = 177;

state178.p = function (step, frame) {
  step.returnCall("OBJECT_PAIR", frame);
};

state178.id = 178;

state179.p = function (step, frame) {
  step.addMark("pair", frame.context, state180);
  step.startCall("EXPR^2").addReturn(frame.context, state181);
};

state179.id = 179;

state180.p = function (step, frame) {
  step.startCall("EXPR^2").addReturn(frame.context, state182);
};

state180.id = 180;

state181.p = function (step, frame) {
  step.returnCall("EXPR^1", frame);
};

state181.id = 181;

state182.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state183);

  if (token === 61) {
    frame.addNextState(state184);
  }
};

state182.id = 182;

state183.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state183);

  if (token === 61) {
    frame.addNextState(state184);
  }
};

state183.id = 183;

state184.p = function (step, frame) {
  var token = step.token;

  if (token === 62) {
    frame.addNextState(state185);
  }
};

state184.id = 184;

state185.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state186);
  step.startCall("EXPR^2").addReturn(frame.context, state187);
};

state185.id = 185;

state186.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state186);
  step.startCall("EXPR^2").addReturn(frame.context, state187);
};

state186.id = 186;

state187.p = function (step, frame) {
  step.returnCall("EXPR^1", frame);
};

state187.id = 187;

state188.p = function (step, frame) {
  step.addMark("or", frame.context, state189);
  step.startCall("EXPR^3").addReturn(frame.context, state190);
};

state188.id = 188;

state189.p = function (step, frame) {
  step.startCall("EXPR^2").addReturn(frame.context, state191);
};

state189.id = 189;

state190.p = function (step, frame) {
  step.returnCall("EXPR^2", frame);
};

state190.id = 190;

state191.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state192);

  if (token === 124) {
    frame.addNextState(state193);
  }
};

state191.id = 191;

state192.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state192);

  if (token === 124) {
    frame.addNextState(state193);
  }
};

state192.id = 192;

state193.p = function (step, frame) {
  var token = step.token;

  if (token === 124) {
    frame.addNextState(state194);
  }
};

state193.id = 193;

state194.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state195);
  step.startCall("EXPR^3").addReturn(frame.context, state196);
};

state194.id = 194;

state195.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state195);
  step.startCall("EXPR^3").addReturn(frame.context, state196);
};

state195.id = 195;

state196.p = function (step, frame) {
  step.returnCall("EXPR^2", frame);
};

state196.id = 196;

state197.p = function (step, frame) {
  step.addMark("and", frame.context, state198);
  step.startCall("EXPR^4").addReturn(frame.context, state199);
};

state197.id = 197;

state198.p = function (step, frame) {
  step.startCall("EXPR^3").addReturn(frame.context, state200);
};

state198.id = 198;

state199.p = function (step, frame) {
  step.returnCall("EXPR^3", frame);
};

state199.id = 199;

state200.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state201);

  if (token === 38) {
    frame.addNextState(state202);
  }
};

state200.id = 200;

state201.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state201);

  if (token === 38) {
    frame.addNextState(state202);
  }
};

state201.id = 201;

state202.p = function (step, frame) {
  var token = step.token;

  if (token === 38) {
    frame.addNextState(state203);
  }
};

state202.id = 202;

state203.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state204);
  step.startCall("EXPR^4").addReturn(frame.context, state205);
};

state203.id = 203;

state204.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state204);
  step.startCall("EXPR^4").addReturn(frame.context, state205);
};

state204.id = 204;

state205.p = function (step, frame) {
  step.returnCall("EXPR^3", frame);
};

state205.id = 205;

state206.p = function (step, frame) {
  step.addMark("comp", frame.context, state207);
  step.addMark("asc", frame.context, state208);
  step.addMark("desc", frame.context, state209);
  step.startCall("EXPR^5").addReturn(frame.context, state210);
};

state206.id = 206;

state207.p = function (step, frame) {
  step.startCall("EXPR^5").addReturn(frame.context, state211);
};

state207.id = 207;

state208.p = function (step, frame) {
  step.startCall("EXPR^4").addReturn(frame.context, state218);
};

state208.id = 208;

state209.p = function (step, frame) {
  step.startCall("EXPR^4").addReturn(frame.context, state223);
};

state209.id = 209;

state210.p = function (step, frame) {
  step.returnCall("EXPR^4", frame);
};

state210.id = 210;

state211.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state212);
  step.addMark("op", frame.context, state213);
};

state211.id = 211;

state212.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state212);
  step.addMark("op", frame.context, state213);
};

state212.id = 212;

state213.p = function (step, frame) {
  step.startCall("COMP_OP").addReturn(frame.context, state214);
};

state213.id = 213;

state214.p = function (step, frame) {
  step.addMark("end", frame.context, state215);
};

state214.id = 214;

state215.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state216);
  step.startCall("EXPR^5").addReturn(frame.context, state217);
};

state215.id = 215;

state216.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state216);
  step.startCall("EXPR^5").addReturn(frame.context, state217);
};

state216.id = 216;

state217.p = function (step, frame) {
  step.returnCall("EXPR^4", frame);
};

state217.id = 217;

state218.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state219);

  if (token === 97) {
    frame.addNextState(state220);
  }
};

state218.id = 218;

state219.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state219);

  if (token === 97) {
    frame.addNextState(state220);
  }
};

state219.id = 219;

state220.p = function (step, frame) {
  var token = step.token;

  if (token === 115) {
    frame.addNextState(state221);
  }
};

state220.id = 220;

state221.p = function (step, frame) {
  var token = step.token;

  if (token === 99) {
    frame.addNextState(state222);
  }
};

state221.id = 221;

state222.p = function (step, frame) {
  step.returnCall("EXPR^4", frame);
};

state222.id = 222;

state223.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state224);

  if (token === 100) {
    frame.addNextState(state225);
  }
};

state223.id = 223;

state224.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state224);

  if (token === 100) {
    frame.addNextState(state225);
  }
};

state224.id = 224;

state225.p = function (step, frame) {
  var token = step.token;

  if (token === 101) {
    frame.addNextState(state226);
  }
};

state225.id = 225;

state226.p = function (step, frame) {
  var token = step.token;

  if (token === 115) {
    frame.addNextState(state227);
  }
};

state226.id = 226;

state227.p = function (step, frame) {
  var token = step.token;

  if (token === 99) {
    frame.addNextState(state228);
  }
};

state227.id = 227;

state228.p = function (step, frame) {
  step.returnCall("EXPR^4", frame);
};

state228.id = 228;

state229.p = function (step, frame) {
  step.addMark("inc_range", frame.context, state230);
  step.addMark("exc_range", frame.context, state231);
  step.startCall("EXPR^6").addReturn(frame.context, state232);
};

state229.id = 229;

state230.p = function (step, frame) {
  step.startCall("EXPR^6").addReturn(frame.context, state233);
};

state230.id = 230;

state231.p = function (step, frame) {
  step.startCall("EXPR^6").addReturn(frame.context, state239);
};

state231.id = 231;

state232.p = function (step, frame) {
  step.returnCall("EXPR^5", frame);
};

state232.id = 232;

state233.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state234);

  if (token === 46) {
    frame.addNextState(state235);
  }
};

state233.id = 233;

state234.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state234);

  if (token === 46) {
    frame.addNextState(state235);
  }
};

state234.id = 234;

state235.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state236);
  }
};

state235.id = 235;

state236.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state237);
  step.startCall("EXPR^6").addReturn(frame.context, state238);
};

state236.id = 236;

state237.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state237);
  step.startCall("EXPR^6").addReturn(frame.context, state238);
};

state237.id = 237;

state238.p = function (step, frame) {
  step.returnCall("EXPR^5", frame);
};

state238.id = 238;

state239.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state240);

  if (token === 46) {
    frame.addNextState(state241);
  }
};

state239.id = 239;

state240.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state240);

  if (token === 46) {
    frame.addNextState(state241);
  }
};

state240.id = 240;

state241.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state242);
  }
};

state241.id = 241;

state242.p = function (step, frame) {
  var token = step.token;

  if (token === 46) {
    frame.addNextState(state243);
  }
};

state242.id = 242;

state243.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state244);
  step.startCall("EXPR^6").addReturn(frame.context, state245);
};

state243.id = 243;

state244.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state244);
  step.startCall("EXPR^6").addReturn(frame.context, state245);
};

state244.id = 244;

state245.p = function (step, frame) {
  step.returnCall("EXPR^5", frame);
};

state245.id = 245;

state246.p = function (step, frame) {
  step.addMark("add", frame.context, state247);
  step.addMark("sub", frame.context, state248);
  step.startCall("EXPR^7").addReturn(frame.context, state249);
};

state246.id = 246;

state247.p = function (step, frame) {
  step.startCall("EXPR^6").addReturn(frame.context, state250);
};

state247.id = 247;

state248.p = function (step, frame) {
  step.startCall("EXPR^6").addReturn(frame.context, state255);
};

state248.id = 248;

state249.p = function (step, frame) {
  step.returnCall("EXPR^6", frame);
};

state249.id = 249;

state250.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state251);

  if (token === 43) {
    frame.addNextState(state252);
  }
};

state250.id = 250;

state251.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state251);

  if (token === 43) {
    frame.addNextState(state252);
  }
};

state251.id = 251;

state252.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state253);
  step.startCall("EXPR^7").addReturn(frame.context, state254);
};

state252.id = 252;

state253.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state253);
  step.startCall("EXPR^7").addReturn(frame.context, state254);
};

state253.id = 253;

state254.p = function (step, frame) {
  step.returnCall("EXPR^6", frame);
};

state254.id = 254;

state255.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state256);

  if (token === 45) {
    frame.addNextState(state257);
  }
};

state255.id = 255;

state256.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state256);

  if (token === 45) {
    frame.addNextState(state257);
  }
};

state256.id = 256;

state257.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state258);
  step.startCall("EXPR^7").addReturn(frame.context, state259);
};

state257.id = 257;

state258.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state258);
  step.startCall("EXPR^7").addReturn(frame.context, state259);
};

state258.id = 258;

state259.p = function (step, frame) {
  step.returnCall("EXPR^6", frame);
};

state259.id = 259;

state260.p = function (step, frame) {
  step.addMark("mul", frame.context, state261);
  step.addMark("div", frame.context, state262);
  step.addMark("mod", frame.context, state263);
  step.startCall("EXPR^9").addReturn(frame.context, state264);
};

state260.id = 260;

state261.p = function (step, frame) {
  step.startCall("EXPR^7").addReturn(frame.context, state265);
};

state261.id = 261;

state262.p = function (step, frame) {
  step.startCall("EXPR^7").addReturn(frame.context, state270);
};

state262.id = 262;

state263.p = function (step, frame) {
  step.startCall("EXPR^7").addReturn(frame.context, state275);
};

state263.id = 263;

state264.p = function (step, frame) {
  step.returnCall("EXPR^7", frame);
};

state264.id = 264;

state265.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state266);
  step.startCall("STAR").addReturn(frame.context, state267);
};

state265.id = 265;

state266.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state266);
  step.startCall("STAR").addReturn(frame.context, state267);
};

state266.id = 266;

state267.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state268);
  step.startCall("EXPR^9").addReturn(frame.context, state269);
};

state267.id = 267;

state268.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state268);
  step.startCall("EXPR^9").addReturn(frame.context, state269);
};

state268.id = 268;

state269.p = function (step, frame) {
  step.returnCall("EXPR^7", frame);
};

state269.id = 269;

state270.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state271);

  if (token === 47) {
    frame.addNextState(state272);
  }
};

state270.id = 270;

state271.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state271);

  if (token === 47) {
    frame.addNextState(state272);
  }
};

state271.id = 271;

state272.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state273);
  step.startCall("EXPR^9").addReturn(frame.context, state274);
};

state272.id = 272;

state273.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state273);
  step.startCall("EXPR^9").addReturn(frame.context, state274);
};

state273.id = 273;

state274.p = function (step, frame) {
  step.returnCall("EXPR^7", frame);
};

state274.id = 274;

state275.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state276);

  if (token === 37) {
    frame.addNextState(state277);
  }
};

state275.id = 275;

state276.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state276);

  if (token === 37) {
    frame.addNextState(state277);
  }
};

state276.id = 276;

state277.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state278);
  step.startCall("EXPR^9").addReturn(frame.context, state279);
};

state277.id = 277;

state278.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state278);
  step.startCall("EXPR^9").addReturn(frame.context, state279);
};

state278.id = 278;

state279.p = function (step, frame) {
  step.returnCall("EXPR^7", frame);
};

state279.id = 279;

state280.p = function (step, frame) {
  step.addMark("pow", frame.context, state281);
  step.startCall("EXPR^11").addReturn(frame.context, state282);
};

state280.id = 280;

state281.p = function (step, frame) {
  step.startCall("EXPR^11").addReturn(frame.context, state283);
};

state281.id = 281;

state282.p = function (step, frame) {
  step.returnCall("EXPR^9", frame);
};

state282.id = 282;

state283.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state284);

  if (token === 42) {
    frame.addNextState(state285);
  }
};

state283.id = 283;

state284.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state284);

  if (token === 42) {
    frame.addNextState(state285);
  }
};

state284.id = 284;

state285.p = function (step, frame) {
  var token = step.token;

  if (token === 42) {
    frame.addNextState(state286);
  }
};

state285.id = 285;

state286.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state287);
  step.startCall("EXPR^9").addReturn(frame.context, state288);
};

state286.id = 286;

state287.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state287);
  step.startCall("EXPR^9").addReturn(frame.context, state288);
};

state287.id = 287;

state288.p = function (step, frame) {
  step.returnCall("EXPR^9", frame);
};

state288.id = 288;

state289.p = function (step, frame) {
  var token = step.token;
  step.startCall("NUMBER").addReturn(frame.context, state290);
  step.startCall("STRING").addReturn(frame.context, state291);
  step.startCall("ARRAY").addReturn(frame.context, state292);
  step.startCall("OBJECT").addReturn(frame.context, state293);
  step.addMark("star", frame.context, state294);
  step.addMark("this", frame.context, state295);
  step.startCall("PARENT").addReturn(frame.context, state296);
  step.addMark("paren", frame.context, state297);

  if (token === 36) {
    frame.addNextState(state298);
  }

  step.addMark("ident", frame.context, state299);
  step.startCall("FUNC_CALL").addReturn(frame.context, state300);
  step.addMark("neg", frame.context, state301);
  step.addMark("pos", frame.context, state302);
  step.addMark("not", frame.context, state303);

  if (token === 105) {
    frame.addNextState(state304);
  }

  step.addMark("deref", frame.context, state305);
  step.addMark("attr_cond", frame.context, state306);
  step.addMark("attr_ident", frame.context, state307);
  step.addMark("pipecall", frame.context, state308);
  step.addMark("project", frame.context, state309);
  step.addMark("filter", frame.context, state310);
  step.addMark("arr_expr", frame.context, state311);
};

state289.id = 289;

state290.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state290.id = 290;

state291.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state291.id = 291;

state292.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state292.id = 292;

state293.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state293.id = 293;

state294.p = function (step, frame) {
  step.startCall("STAR").addReturn(frame.context, state312);
};

state294.id = 294;

state295.p = function (step, frame) {
  var token = step.token;

  if (token === 64) {
    frame.addNextState(state313);
  }
};

state295.id = 295;

state296.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state296.id = 296;

state297.p = function (step, frame) {
  var token = step.token;

  if (token === 40) {
    frame.addNextState(state314);
  }
};

state297.id = 297;

state298.p = function (step, frame) {
  step.addMark("param", frame.context, state319);
};

state298.id = 298;

state299.p = function (step, frame) {
  step.startCall("IDENT").addReturn(frame.context, state322);
};

state299.id = 299;

state300.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state300.id = 300;

state301.p = function (step, frame) {
  var token = step.token;

  if (token === 45) {
    frame.addNextState(state324);
  }
};

state301.id = 301;

state302.p = function (step, frame) {
  var token = step.token;

  if (token === 43) {
    frame.addNextState(state327);
  }
};

state302.id = 302;

state303.p = function (step, frame) {
  var token = step.token;

  if (token === 33) {
    frame.addNextState(state330);
  }
};

state303.id = 303;

state304.p = function (step, frame) {
  var token = step.token;

  if (token === 115) {
    frame.addNextState(state333);
  }
};

state304.id = 304;

state305.p = function (step, frame) {
  step.startCall("EXPR^11").addReturn(frame.context, state336);
};

state305.id = 305;

state306.p = function (step, frame) {
  step.startCall("EXPR^11").addReturn(frame.context, state343);
};

state306.id = 306;

state307.p = function (step, frame) {
  step.startCall("EXPR^11").addReturn(frame.context, state352);
};

state307.id = 307;

state308.p = function (step, frame) {
  step.startCall("EXPR^11").addReturn(frame.context, state358);
};

state308.id = 308;

state309.p = function (step, frame) {
  step.startCall("EXPR^11").addReturn(frame.context, state362);
};

state309.id = 309;

state310.p = function (step, frame) {
  step.startCall("EXPR^11").addReturn(frame.context, state366);
};

state310.id = 310;

state311.p = function (step, frame) {
  step.startCall("EXPR^11").addReturn(frame.context, state374);
};

state311.id = 311;

state312.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state312.id = 312;

state313.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state313.id = 313;

state314.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state315);
  step.startCall("EXPR^1").addReturn(frame.context, state316);
};

state314.id = 314;

state315.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state315);
  step.startCall("EXPR^1").addReturn(frame.context, state316);
};

state315.id = 315;

state316.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state317);

  if (token === 41) {
    frame.addNextState(state318);
  }
};

state316.id = 316;

state317.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state317);

  if (token === 41) {
    frame.addNextState(state318);
  }
};

state317.id = 317;

state318.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state318.id = 318;

state319.p = function (step, frame) {
  step.startCall("IDENT").addReturn(frame.context, state320);
};

state319.id = 319;

state320.p = function (step, frame) {
  step.addMark("param_end", frame.context, state321);
};

state320.id = 320;

state321.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state321.id = 321;

state322.p = function (step, frame) {
  step.addMark("ident_end", frame.context, state323);
};

state322.id = 322;

state323.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state323.id = 323;

state324.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state325);
  step.startCall("EXPR^9").addReturn(frame.context, state326);
};

state324.id = 324;

state325.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state325);
  step.startCall("EXPR^9").addReturn(frame.context, state326);
};

state325.id = 325;

state326.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state326.id = 326;

state327.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state328);
  step.startCall("EXPR^11").addReturn(frame.context, state329);
};

state327.id = 327;

state328.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state328);
  step.startCall("EXPR^11").addReturn(frame.context, state329);
};

state328.id = 328;

state329.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state329.id = 329;

state330.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state331);
  step.startCall("EXPR^11").addReturn(frame.context, state332);
};

state330.id = 330;

state331.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state331);
  step.startCall("EXPR^11").addReturn(frame.context, state332);
};

state331.id = 331;

state332.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state332.id = 332;

state333.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state334);
  step.startCall("EXPR^11").addReturn(frame.context, state335);
};

state333.id = 333;

state334.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state334);
  step.startCall("EXPR^11").addReturn(frame.context, state335);
};

state334.id = 334;

state335.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state335.id = 335;

state336.p = function (step, frame) {
  var token = step.token;

  if (token === 45) {
    frame.addNextState(state337);
  }
};

state336.id = 336;

state337.p = function (step, frame) {
  var token = step.token;

  if (token === 62) {
    frame.addNextState(state338);
  }
};

state337.id = 337;

state338.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state339);
  step.addMark("deref_field", frame.context, state340);
  step.returnCall("EXPR^11", frame);
};

state338.id = 338;

state339.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state339);
  step.addMark("deref_field", frame.context, state340);
};

state339.id = 339;

state340.p = function (step, frame) {
  step.startCall("IDENT").addReturn(frame.context, state341);
};

state340.id = 340;

state341.p = function (step, frame) {
  step.addMark("end", frame.context, state342);
};

state341.id = 341;

state342.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state342.id = 342;

state343.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state344);

  if (token === 46) {
    frame.addNextState(state345);
  }
};

state343.id = 343;

state344.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state344);

  if (token === 46) {
    frame.addNextState(state345);
  }
};

state344.id = 344;

state345.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state346);

  if (token === 91) {
    frame.addNextState(state347);
  }
};

state345.id = 345;

state346.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state346);

  if (token === 91) {
    frame.addNextState(state347);
  }
};

state346.id = 346;

state347.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state348);
  step.startCall("EXPR^1").addReturn(frame.context, state349);
};

state347.id = 347;

state348.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state348);
  step.startCall("EXPR^1").addReturn(frame.context, state349);
};

state348.id = 348;

state349.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state350);

  if (token === 93) {
    frame.addNextState(state351);
  }
};

state349.id = 349;

state350.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state350);

  if (token === 93) {
    frame.addNextState(state351);
  }
};

state350.id = 350;

state351.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state351.id = 351;

state352.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state353);

  if (token === 46) {
    frame.addNextState(state354);
  }
};

state352.id = 352;

state353.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state353);

  if (token === 46) {
    frame.addNextState(state354);
  }
};

state353.id = 353;

state354.p = function (step, frame) {
  step.addMark("ident", frame.context, state355);
};

state354.id = 354;

state355.p = function (step, frame) {
  step.startCall("IDENT").addReturn(frame.context, state356);
};

state355.id = 355;

state356.p = function (step, frame) {
  step.addMark("ident_end", frame.context, state357);
};

state356.id = 356;

state357.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state357.id = 357;

state358.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state359);
  step.startCall("PIPE").addReturn(frame.context, state360);
};

state358.id = 358;

state359.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state359);
  step.startCall("PIPE").addReturn(frame.context, state360);
};

state359.id = 359;

state360.p = function (step, frame) {
  step.startCall("FUNC_CALL").addReturn(frame.context, state361);
};

state360.id = 360;

state361.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state361.id = 361;

state362.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state363);
  step.startCall("PIPE").addReturn(frame.context, state364);
  step.startCall("OBJECT").addReturn(frame.context, state365);
};

state362.id = 362;

state363.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state363);
  step.startCall("PIPE").addReturn(frame.context, state364);
  step.startCall("OBJECT").addReturn(frame.context, state365);
};

state363.id = 363;

state364.p = function (step, frame) {
  step.startCall("OBJECT").addReturn(frame.context, state365);
};

state364.id = 364;

state365.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state365.id = 365;

state366.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state367);
  step.startCall("PIPE").addReturn(frame.context, state368);

  if (token === 91) {
    frame.addNextState(state369);
  }
};

state366.id = 366;

state367.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state367);
  step.startCall("PIPE").addReturn(frame.context, state368);

  if (token === 91) {
    frame.addNextState(state369);
  }
};

state367.id = 367;

state368.p = function (step, frame) {
  var token = step.token;

  if (token === 91) {
    frame.addNextState(state369);
  }
};

state368.id = 368;

state369.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state370);
  step.startCall("EXPR^1").addReturn(frame.context, state371);
};

state369.id = 369;

state370.p = function (step, frame) {
  step.startCall("IGN").addReturn(frame.context, state370);
  step.startCall("EXPR^1").addReturn(frame.context, state371);
};

state370.id = 370;

state371.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state372);

  if (token === 93) {
    frame.addNextState(state373);
  }
};

state371.id = 371;

state372.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state372);

  if (token === 93) {
    frame.addNextState(state373);
  }
};

state372.id = 372;

state373.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state373.id = 373;

state374.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state375);
  step.startCall("PIPE").addReturn(frame.context, state376);

  if (token === 91) {
    frame.addNextState(state377);
  }
};

state374.id = 374;

state375.p = function (step, frame) {
  var token = step.token;
  step.startCall("IGN").addReturn(frame.context, state375);
  step.startCall("PIPE").addReturn(frame.context, state376);

  if (token === 91) {
    frame.addNextState(state377);
  }
};

state375.id = 375;

state376.p = function (step, frame) {
  var token = step.token;

  if (token === 91) {
    frame.addNextState(state377);
  }
};

state376.id = 376;

state377.p = function (step, frame) {
  var token = step.token;

  if (token === 93) {
    frame.addNextState(state378);
  }
};

state377.id = 377;

state378.p = function (step, frame) {
  step.returnCall("EXPR^11", frame);
};

state378.id = 378;
var initialContext = /*#__PURE__*/new Context(null, null);
var initialFrame = /*#__PURE__*/new Frame(initialContext);
initialFrame.addNextState(state0);
var initialFrames = [initialFrame];
var ruleInitialStates = {};
ruleInitialStates["main"] = [state2];
ruleInitialStates["SPACE"] = [state6];
ruleInitialStates["COMMENT"] = [state15];
ruleInitialStates["COMMENT_END"] = [state21];
ruleInitialStates["IGN"] = [state23];
ruleInitialStates["PIPE"] = [state26];
ruleInitialStates["PARENT"] = [state29];
ruleInitialStates["IDENT_FST"] = [state36];
ruleInitialStates["IDENT_REST"] = [state40];
ruleInitialStates["IDENT"] = [state43];
ruleInitialStates["STAR"] = [state46];
ruleInitialStates["COMP_OP"] = [state48];
ruleInitialStates["FUNC_CALL"] = [state66];
ruleInitialStates["FUNC_ARGS"] = [state76];
ruleInitialStates["NUMBER"] = [state83];
ruleInitialStates["DIGIT"] = [state101];
ruleInitialStates["SIGN"] = [state103];
ruleInitialStates["STRING"] = [state106];
ruleInitialStates["DSTRING_CHAR"] = [state117];
ruleInitialStates["SSTRING_CHAR"] = [state121];
ruleInitialStates["ARRAY"] = [state125];
ruleInitialStates["ARRAY_ELEMENT"] = [state139];
ruleInitialStates["OBJECT"] = [state146];
ruleInitialStates["OBJECT_PAIR"] = [state160];
ruleInitialStates["EXPR^1"] = [state179];
ruleInitialStates["EXPR^2"] = [state188];
ruleInitialStates["EXPR^3"] = [state197];
ruleInitialStates["EXPR^4"] = [state206];
ruleInitialStates["EXPR^5"] = [state229];
ruleInitialStates["EXPR^6"] = [state246];
ruleInitialStates["EXPR^7"] = [state260];
ruleInitialStates["EXPR^9"] = [state280];
ruleInitialStates["EXPR^11"] = [state289];
var parse_1 = parse;

function isValueNode(node) {
  return node.type === 'Value';
}

function isNumber(node) {
  return isValueNode(node) && typeof node.value === 'number';
}

function isString(node) {
  return isValueNode(node) && typeof node.value === 'string';
}

var ESCAPE_SEQUENCE = {
  "'": "'",
  '"': '"',
  '\\': '\\',
  '/': '/',
  b: '\b',
  f: '\f',
  n: '\n',
  r: '\r',
  t: '\t'
};

function expandHex(str) {
  var charCode = parseInt(str, 16);
  return String.fromCharCode(charCode);
}

function expandEscapeSequence(str) {
  var re = /\\(['"/\\bfnrt]|u([A-Fa-f0-9]{4})|u\{([A-Fa-f0-9]+)\})/g;
  return str.replace(re, function (_, esc, u1, u2) {
    if (u1) return expandHex(u1);
    if (u2) return expandHex(u2);
    return ESCAPE_SEQUENCE[esc];
  });
}

var GroqQueryError = /*#__PURE__*/function (_Error) {
  _inheritsLoose(GroqQueryError, _Error);

  function GroqQueryError() {
    return _Error.apply(this, arguments) || this;
  }

  return GroqQueryError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var BUILDER = {
  paren: function paren(p) {
    var inner = p.process();
    return {
      type: 'Parenthesis',
      base: inner
    };
  },
  filter: function filter(p) {
    var base = p.process();
    var query = p.process();

    if (isNumber(query)) {
      return {
        type: 'Element',
        base: base,
        index: query
      };
    }

    if (isString(query)) {
      return {
        type: 'Attribute',
        base: base,
        name: query.value
      };
    }

    if (query.type === 'Range') {
      return {
        type: 'Slice',
        base: base,
        left: query.left,
        right: query.right,
        isExclusive: query.isExclusive
      };
    }

    return {
      type: 'Filter',
      base: base,
      query: query
    };
  },
  project: function project(p) {
    var base = p.process();
    var query = p.process();
    return {
      type: 'Projection',
      base: base,
      query: query
    };
  },
  star: function star() {
    return {
      type: 'Star'
    };
  },
  "this": function _this() {
    return {
      type: 'This'
    };
  },
  parent: function parent() {
    return {
      type: 'Parent',
      n: 1
    };
  },
  dblparent: function dblparent(p) {
    var next = p.process();
    return {
      type: 'Parent',
      n: next.n + 1
    };
  },
  ident: function ident(p) {
    var name = p.processStringEnd();
    if (name === 'null') return {
      type: 'Value',
      value: null
    };
    if (name === 'true') return {
      type: 'Value',
      value: true
    };
    if (name === 'false') return {
      type: 'Value',
      value: false
    };
    return {
      type: 'Identifier',
      name: name
    };
  },
  attr_ident: function attr_ident(p) {
    var base = p.process();
    var name = p.processString();
    return {
      type: 'Attribute',
      base: base,
      name: name
    };
  },
  arr_expr: function arr_expr(p) {
    var base = p.process();
    return {
      type: 'Mapper',
      base: base
    };
  },
  inc_range: function inc_range(p) {
    var left = p.process();
    var right = p.process();
    return {
      type: 'Range',
      left: left,
      right: right,
      isExclusive: false
    };
  },
  exc_range: function exc_range(p) {
    var left = p.process();
    var right = p.process();
    return {
      type: 'Range',
      left: left,
      right: right,
      isExclusive: true
    };
  },
  neg: function neg(p) {
    var base = p.process();

    if (base.type === 'Value' && typeof base.value === 'number') {
      return {
        type: 'Value',
        value: -base.value
      };
    }

    return {
      type: 'Neg',
      base: base
    };
  },
  pos: function pos(p) {
    var base = p.process();

    if (isNumber(base)) {
      return {
        type: 'Value',
        value: +base.value
      };
    }

    return {
      type: 'Pos',
      base: base
    };
  },
  add: function add(p) {
    var left = p.process();
    var right = p.process();
    return {
      type: 'OpCall',
      op: '+',
      left: left,
      right: right
    };
  },
  sub: function sub(p) {
    var left = p.process();
    var right = p.process();
    return {
      type: 'OpCall',
      op: '-',
      left: left,
      right: right
    };
  },
  mul: function mul(p) {
    var left = p.process();
    var right = p.process();
    return {
      type: 'OpCall',
      op: '*',
      left: left,
      right: right
    };
  },
  div: function div(p) {
    var left = p.process();
    var right = p.process();
    return {
      type: 'OpCall',
      op: '/',
      left: left,
      right: right
    };
  },
  mod: function mod(p) {
    var left = p.process();
    var right = p.process();
    return {
      type: 'OpCall',
      op: '%',
      left: left,
      right: right
    };
  },
  pow: function pow(p) {
    var left = p.process();
    var right = p.process();
    return {
      type: 'OpCall',
      op: '**',
      left: left,
      right: right
    };
  },
  deref: function deref(p) {
    var base = p.process();
    var nextMark = p.getMark();
    var result = {
      type: 'Deref',
      base: base
    };

    if (nextMark && nextMark.name === 'deref_field') {
      var name = p.processString();
      return {
        type: 'Attribute',
        base: result,
        name: name
      };
    }

    return result;
  },
  comp: function comp(p) {
    var left = p.process();
    var op = p.processString();
    var right = p.process();
    return {
      type: 'OpCall',
      op: op,
      left: left,
      right: right
    };
  },
  str_begin: function str_begin(p) {
    var value = expandEscapeSequence(p.processStringEnd());
    return {
      type: 'Value',
      value: value
    };
  },
  integer: function integer(p) {
    var strValue = p.processStringEnd();
    return {
      type: 'Value',
      value: Number(strValue)
    };
  },
  "float": function float(p) {
    var strValue = p.processStringEnd();
    return {
      type: 'Value',
      value: Number(strValue)
    };
  },
  sci: function sci(p) {
    var strValue = p.processStringEnd();
    return {
      type: 'Value',
      value: Number(strValue)
    };
  },
  pair: function pair(p) {
    var left = p.process();
    var right = p.process();
    return {
      type: 'Pair',
      left: left,
      right: right
    };
  },
  object: function object(p) {
    var attributes = [];

    while (p.getMark().name !== 'object_end') {
      attributes.push(p.process());
    }

    p.shift();
    return {
      type: 'Object',
      attributes: attributes
    };
  },
  object_expr: function object_expr(p) {
    var value = p.process();

    if (value.type === 'Pair') {
      return {
        type: 'ObjectConditionalSplat',
        condition: value.left,
        value: value.right
      };
    }

    return {
      type: 'ObjectAttribute',
      key: {
        type: 'Value',
        value: extractPropertyKey(value)
      },
      value: value
    };
  },
  object_pair: function object_pair(p) {
    var key = p.process();
    var value = p.process();
    return {
      type: 'ObjectAttribute',
      key: key,
      value: value
    };
  },
  object_splat: function object_splat(p) {
    var value = p.process();
    return {
      type: 'ObjectSplat',
      value: value
    };
  },
  object_splat_this: function object_splat_this() {
    return {
      type: 'ObjectSplat',
      value: {
        type: 'This'
      }
    };
  },
  array: function array(p) {
    var elements = [];

    while (p.getMark().name !== 'array_end') {
      var isSplat = false;

      if (p.getMark().name === 'array_splat') {
        isSplat = true;
        p.shift();
      }

      var value = p.process();
      elements.push({
        type: 'ArrayElement',
        value: value,
        isSplat: isSplat
      });
    }

    p.shift();
    return {
      type: 'Array',
      elements: elements
    };
  },
  func_call: function func_call(p) {
    var name = p.processStringEnd();
    var args = [];

    while (p.getMark().name !== 'func_args_end') {
      args.push(p.process());
    }

    p.shift();
    var func = functions[name];

    if (!func) {
      throw new GroqQueryError("Undefined function: " + name);
    }

    validateArity(name, func.arity, args.length);
    return {
      type: 'FuncCall',
      func: func,
      name: name,
      args: args
    };
  },
  pipecall: function pipecall(p) {
    var base = p.process();
    var name = p.processString();
    var args = [];

    while (p.getMark().name !== 'func_args_end') {
      args.push(p.process());
    }

    p.shift();
    var func = pipeFunctions[name];

    if (!func) {
      throw new GroqQueryError("Undefined pipe function: " + name);
    }

    validateArity(name, func.arity, args.length);
    return {
      type: 'PipeFuncCall',
      func: func,
      base: base,
      name: func.name,
      args: args
    };
  },
  and: function and(p) {
    var left = p.process();
    var right = p.process();
    return {
      type: 'And',
      left: left,
      right: right
    };
  },
  or: function or(p) {
    var left = p.process();
    var right = p.process();
    return {
      type: 'Or',
      left: left,
      right: right
    };
  },
  not: function not(p) {
    var base = p.process();
    return {
      type: 'Not',
      base: base
    };
  },
  asc: function asc(p) {
    var base = p.process();
    return {
      type: 'Asc',
      base: base
    };
  },
  desc: function desc(p) {
    var base = p.process();
    return {
      type: 'Desc',
      base: base
    };
  },
  param: function param(p) {
    var name = p.processStringEnd();
    return {
      type: 'Parameter',
      name: name
    };
  }
};
var NESTED_PROPERTY_TYPES = ['Deref', 'Projection', 'Mapper', 'Filter', 'Element', 'Slice'];

function isNestedPropertyType(node) {
  return NESTED_PROPERTY_TYPES.includes(node.type);
}

function extractPropertyKey(node) {
  if (node.type === 'Identifier') {
    return node.name;
  }

  if (isNestedPropertyType(node)) {
    return extractPropertyKey(node.base);
  }

  throw new GroqQueryError('Cannot determine property key for type: ' + node.type);
}

function validateArity(name, arity, count) {
  if (typeof arity === 'number') {
    if (count !== arity) {
      throw new GroqQueryError("Incorrect number of arguments to function " + name + "(). Expected " + arity + ", got " + count + ".");
    }
  } else if (arity) {
    if (!arity(count)) {
      throw new GroqQueryError("Incorrect number of arguments to function " + name + "().");
    }
  }
}

var GroqSyntaxError = /*#__PURE__*/function (_Error2) {
  _inheritsLoose(GroqSyntaxError, _Error2);

  function GroqSyntaxError(position) {
    var _this2;

    _this2 = _Error2.call(this, "Syntax error in GROQ query at position " + position) || this;
    _this2.name = 'GroqSyntaxError';
    _this2.position = position;
    return _this2;
  }

  return GroqSyntaxError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Parses a GROQ query and returns a tree structure.
 */


function parse$1(input) {
  var result = parse_1(input);
  if (result.type === 'error') throw new GroqSyntaxError(result.position);
  var processor = new MarkProcessor(BUILDER, input, result.marks);
  return processor.process();
}

var isEqual = equality;

function equality(_x, _x2) {
  return _equality.apply(this, arguments);
}

function _equality() {
  _equality = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(a, b) {
    var aType, bType;
    return runtime_1.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            aType = a.getType();
            bType = b.getType();

            if (!(aType !== bType)) {
              _context.next = 4;
              break;
            }

            return _context.abrupt("return", false);

          case 4:
            if (!(aType === 'number' || aType === 'string' || aType === 'boolean' || aType === 'null')) {
              _context.next = 12;
              break;
            }

            _context.next = 7;
            return a.get();

          case 7:
            _context.t0 = _context.sent;
            _context.next = 10;
            return b.get();

          case 10:
            _context.t1 = _context.sent;
            return _context.abrupt("return", _context.t0 === _context.t1);

          case 12:
            return _context.abrupt("return", false);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _equality.apply(this, arguments);
}

var operators = {
  '==': /*#__PURE__*/function () {
    var _eq = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(left, right, scope, execute) {
      var a, b, result;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return execute(left, scope);

            case 2:
              a = _context.sent;
              _context.next = 5;
              return execute(right, scope);

            case 5:
              b = _context.sent;
              _context.next = 8;
              return isEqual(a, b);

            case 8:
              result = _context.sent;
              return _context.abrupt("return", result ? TRUE_VALUE : FALSE_VALUE);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function eq(_x, _x2, _x3, _x4) {
      return _eq.apply(this, arguments);
    }

    return eq;
  }(),
  '!=': /*#__PURE__*/function () {
    var _neq = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(left, right, scope, execute) {
      var a, b, result;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return execute(left, scope);

            case 2:
              a = _context2.sent;
              _context2.next = 5;
              return execute(right, scope);

            case 5:
              b = _context2.sent;
              _context2.next = 8;
              return isEqual(a, b);

            case 8:
              result = _context2.sent;
              return _context2.abrupt("return", result ? FALSE_VALUE : TRUE_VALUE);

            case 10:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function neq(_x5, _x6, _x7, _x8) {
      return _neq.apply(this, arguments);
    }

    return neq;
  }(),
  '>': /*#__PURE__*/function () {
    var _gt = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(left, right, scope, execute) {
      var a, b, result;
      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return execute(left, scope);

            case 2:
              _context3.next = 4;
              return _context3.sent.get();

            case 4:
              a = _context3.sent;
              _context3.next = 7;
              return execute(right, scope);

            case 7:
              _context3.next = 9;
              return _context3.sent.get();

            case 9:
              b = _context3.sent;
              result = partialCompare(a, b);

              if (!(result === null)) {
                _context3.next = 15;
                break;
              }

              return _context3.abrupt("return", NULL_VALUE);

            case 15:
              return _context3.abrupt("return", result > 0 ? TRUE_VALUE : FALSE_VALUE);

            case 16:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function gt(_x9, _x10, _x11, _x12) {
      return _gt.apply(this, arguments);
    }

    return gt;
  }(),
  '>=': /*#__PURE__*/function () {
    var _gte = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(left, right, scope, execute) {
      var a, b, result;
      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return execute(left, scope);

            case 2:
              _context4.next = 4;
              return _context4.sent.get();

            case 4:
              a = _context4.sent;
              _context4.next = 7;
              return execute(right, scope);

            case 7:
              _context4.next = 9;
              return _context4.sent.get();

            case 9:
              b = _context4.sent;
              result = partialCompare(a, b);

              if (!(result === null)) {
                _context4.next = 15;
                break;
              }

              return _context4.abrupt("return", NULL_VALUE);

            case 15:
              return _context4.abrupt("return", result >= 0 ? TRUE_VALUE : FALSE_VALUE);

            case 16:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    function gte(_x13, _x14, _x15, _x16) {
      return _gte.apply(this, arguments);
    }

    return gte;
  }(),
  '<': /*#__PURE__*/function () {
    var _lt = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(left, right, scope, execute) {
      var a, b, result;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return execute(left, scope);

            case 2:
              _context5.next = 4;
              return _context5.sent.get();

            case 4:
              a = _context5.sent;
              _context5.next = 7;
              return execute(right, scope);

            case 7:
              _context5.next = 9;
              return _context5.sent.get();

            case 9:
              b = _context5.sent;
              result = partialCompare(a, b);

              if (!(result === null)) {
                _context5.next = 15;
                break;
              }

              return _context5.abrupt("return", NULL_VALUE);

            case 15:
              return _context5.abrupt("return", result < 0 ? TRUE_VALUE : FALSE_VALUE);

            case 16:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));

    function lt(_x17, _x18, _x19, _x20) {
      return _lt.apply(this, arguments);
    }

    return lt;
  }(),
  '<=': /*#__PURE__*/function () {
    var _lte = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(left, right, scope, execute) {
      var a, b, result;
      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return execute(left, scope);

            case 2:
              _context6.next = 4;
              return _context6.sent.get();

            case 4:
              a = _context6.sent;
              _context6.next = 7;
              return execute(right, scope);

            case 7:
              _context6.next = 9;
              return _context6.sent.get();

            case 9:
              b = _context6.sent;
              result = partialCompare(a, b);

              if (!(result === null)) {
                _context6.next = 15;
                break;
              }

              return _context6.abrupt("return", NULL_VALUE);

            case 15:
              return _context6.abrupt("return", result <= 0 ? TRUE_VALUE : FALSE_VALUE);

            case 16:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6);
    }));

    function lte(_x21, _x22, _x23, _x24) {
      return _lte.apply(this, arguments);
    }

    return lte;
  }(),
  "in": /*#__PURE__*/function () {
    var _inop = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7(left, right, scope, execute) {
      var a, choices, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, b, value, range, leftCmp, rightCmp, str, path;

      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return execute(left, scope);

            case 2:
              a = _context7.sent;
              _context7.next = 5;
              return execute(right, scope);

            case 5:
              choices = _context7.sent;
              _context7.t0 = choices.getType();
              _context7.next = _context7.t0 === 'array' ? 9 : _context7.t0 === 'range' ? 46 : _context7.t0 === 'path' ? 63 : 72;
              break;

            case 9:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _context7.prev = 11;
              _iterator = _asyncIterator(choices);

            case 13:
              _context7.next = 15;
              return _iterator.next();

            case 15:
              _step = _context7.sent;
              _iteratorNormalCompletion = _step.done;
              _context7.next = 19;
              return _step.value;

            case 19:
              _value = _context7.sent;

              if (_iteratorNormalCompletion) {
                _context7.next = 29;
                break;
              }

              b = _value;
              _context7.next = 24;
              return isEqual(a, b);

            case 24:
              if (!_context7.sent) {
                _context7.next = 26;
                break;
              }

              return _context7.abrupt("return", TRUE_VALUE);

            case 26:
              _iteratorNormalCompletion = true;
              _context7.next = 13;
              break;

            case 29:
              _context7.next = 35;
              break;

            case 31:
              _context7.prev = 31;
              _context7.t1 = _context7["catch"](11);
              _didIteratorError = true;
              _iteratorError = _context7.t1;

            case 35:
              _context7.prev = 35;
              _context7.prev = 36;

              if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                _context7.next = 40;
                break;
              }

              _context7.next = 40;
              return _iterator["return"]();

            case 40:
              _context7.prev = 40;

              if (!_didIteratorError) {
                _context7.next = 43;
                break;
              }

              throw _iteratorError;

            case 43:
              return _context7.finish(40);

            case 44:
              return _context7.finish(35);

            case 45:
              return _context7.abrupt("return", FALSE_VALUE);

            case 46:
              _context7.next = 48;
              return a.get();

            case 48:
              value = _context7.sent;
              _context7.next = 51;
              return choices.get();

            case 51:
              range = _context7.sent;
              leftCmp = partialCompare(value, range.left);

              if (!(leftCmp === null)) {
                _context7.next = 55;
                break;
              }

              return _context7.abrupt("return", NULL_VALUE);

            case 55:
              rightCmp = partialCompare(value, range.right);

              if (!(rightCmp === null)) {
                _context7.next = 58;
                break;
              }

              return _context7.abrupt("return", NULL_VALUE);

            case 58:
              if (!range.isExclusive()) {
                _context7.next = 62;
                break;
              }

              return _context7.abrupt("return", leftCmp >= 0 && rightCmp < 0 ? TRUE_VALUE : FALSE_VALUE);

            case 62:
              return _context7.abrupt("return", leftCmp >= 0 && rightCmp <= 0 ? TRUE_VALUE : FALSE_VALUE);

            case 63:
              if (!(a.getType() !== 'string')) {
                _context7.next = 65;
                break;
              }

              return _context7.abrupt("return", NULL_VALUE);

            case 65:
              _context7.next = 67;
              return a.get();

            case 67:
              str = _context7.sent;
              _context7.next = 70;
              return choices.get();

            case 70:
              path = _context7.sent;
              return _context7.abrupt("return", path.matches(str) ? TRUE_VALUE : FALSE_VALUE);

            case 72:
              return _context7.abrupt("return", NULL_VALUE);

            case 73:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, null, [[11, 31, 35, 45], [36,, 40, 44]]);
    }));

    function inop(_x25, _x26, _x27, _x28) {
      return _inop.apply(this, arguments);
    }

    return inop;
  }(),
  match: /*#__PURE__*/function () {
    var _match = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(left, right, scope, execute) {
      var text, pattern, tokens, patterns, didSucceed, matched;
      return runtime_1.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _context8.next = 2;
              return execute(left, scope);

            case 2:
              text = _context8.sent;
              _context8.next = 5;
              return execute(right, scope);

            case 5:
              pattern = _context8.sent;
              tokens = [];
              patterns = [];
              _context8.next = 10;
              return gatherText(text, function (part) {
                tokens = tokens.concat(part.match(/[A-Za-z0-9]+/g));
              });

            case 10:
              didSucceed = _context8.sent;

              if (didSucceed) {
                _context8.next = 13;
                break;
              }

              return _context8.abrupt("return", NULL_VALUE);

            case 13:
              _context8.next = 15;
              return gatherText(pattern, function (part) {
                patterns = patterns.concat(part.match(/[A-Za-z0-9*]+/g));
              });

            case 15:
              didSucceed = _context8.sent;

              if (didSucceed) {
                _context8.next = 18;
                break;
              }

              return _context8.abrupt("return", NULL_VALUE);

            case 18:
              matched = patterns.every(function (p) {
                var regexp = new RegExp('^' + p.replace('*', '.*') + '$', 'i');
                return tokens.some(function (token) {
                  return regexp.test(token);
                });
              });
              return _context8.abrupt("return", matched ? TRUE_VALUE : FALSE_VALUE);

            case 20:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8);
    }));

    function match(_x29, _x30, _x31, _x32) {
      return _match.apply(this, arguments);
    }

    return match;
  }(),
  '+': /*#__PURE__*/function () {
    var _plus = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9(left, right, scope, execute) {
      var a, b, aType, bType;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _context9.next = 2;
              return execute(left, scope);

            case 2:
              a = _context9.sent;
              _context9.next = 5;
              return execute(right, scope);

            case 5:
              b = _context9.sent;
              aType = a.getType();
              bType = b.getType();

              if (!(aType === 'number' && bType === 'number' || aType === 'string' && bType === 'string')) {
                _context9.next = 18;
                break;
              }

              _context9.t0 = StaticValue;
              _context9.next = 12;
              return a.get();

            case 12:
              _context9.t1 = _context9.sent;
              _context9.next = 15;
              return b.get();

            case 15:
              _context9.t2 = _context9.sent;
              _context9.t3 = _context9.t1 + _context9.t2;
              return _context9.abrupt("return", new _context9.t0(_context9.t3));

            case 18:
              return _context9.abrupt("return", NULL_VALUE);

            case 19:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }));

    function plus(_x33, _x34, _x35, _x36) {
      return _plus.apply(this, arguments);
    }

    return plus;
  }(),
  '-': /*#__PURE__*/numericOperator(function (a, b) {
    return a - b;
  }),
  '*': /*#__PURE__*/numericOperator(function (a, b) {
    return a * b;
  }),
  '/': /*#__PURE__*/numericOperator(function (a, b) {
    return a / b;
  }),
  '%': /*#__PURE__*/numericOperator(function (a, b) {
    return a % b;
  }),
  '**': /*#__PURE__*/numericOperator(function (a, b) {
    return Math.pow(a, b);
  })
};

function numericOperator(impl) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(left, right, scope, execute) {
      var a, b, aType, bType, result;
      return runtime_1.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _context10.next = 2;
              return execute(left, scope);

            case 2:
              a = _context10.sent;
              _context10.next = 5;
              return execute(right, scope);

            case 5:
              b = _context10.sent;
              aType = a.getType();
              bType = b.getType();

              if (!(aType === 'number' && bType === 'number')) {
                _context10.next = 18;
                break;
              }

              _context10.t0 = impl;
              _context10.next = 12;
              return a.get();

            case 12:
              _context10.t1 = _context10.sent;
              _context10.next = 15;
              return b.get();

            case 15:
              _context10.t2 = _context10.sent;
              result = (0, _context10.t0)(_context10.t1, _context10.t2);
              return _context10.abrupt("return", fromNumber(result));

            case 18:
              return _context10.abrupt("return", NULL_VALUE);

            case 19:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10);
    }));

    return function (_x37, _x38, _x39, _x40) {
      return _ref.apply(this, arguments);
    };
  }();
}

function gatherText(_x41, _x42) {
  return _gatherText.apply(this, arguments);
}

function _gatherText() {
  _gatherText = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11(value, cb) {
    var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, part;

    return runtime_1.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.t0 = value.getType();
            _context11.next = _context11.t0 === 'string' ? 3 : _context11.t0 === 'array' ? 9 : 51;
            break;

          case 3:
            _context11.t1 = cb;
            _context11.next = 6;
            return value.get();

          case 6:
            _context11.t2 = _context11.sent;
            (0, _context11.t1)(_context11.t2);
            return _context11.abrupt("return", true);

          case 9:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _context11.prev = 11;
            _iterator2 = _asyncIterator(value);

          case 13:
            _context11.next = 15;
            return _iterator2.next();

          case 15:
            _step2 = _context11.sent;
            _iteratorNormalCompletion2 = _step2.done;
            _context11.next = 19;
            return _step2.value;

          case 19:
            _value2 = _context11.sent;

            if (_iteratorNormalCompletion2) {
              _context11.next = 34;
              break;
            }

            part = _value2;

            if (!(part.getType() === 'string')) {
              _context11.next = 30;
              break;
            }

            _context11.t3 = cb;
            _context11.next = 26;
            return part.get();

          case 26:
            _context11.t4 = _context11.sent;
            (0, _context11.t3)(_context11.t4);
            _context11.next = 31;
            break;

          case 30:
            return _context11.abrupt("return", false);

          case 31:
            _iteratorNormalCompletion2 = true;
            _context11.next = 13;
            break;

          case 34:
            _context11.next = 40;
            break;

          case 36:
            _context11.prev = 36;
            _context11.t5 = _context11["catch"](11);
            _didIteratorError2 = true;
            _iteratorError2 = _context11.t5;

          case 40:
            _context11.prev = 40;
            _context11.prev = 41;

            if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
              _context11.next = 45;
              break;
            }

            _context11.next = 45;
            return _iterator2["return"]();

          case 45:
            _context11.prev = 45;

            if (!_didIteratorError2) {
              _context11.next = 48;
              break;
            }

            throw _iteratorError2;

          case 48:
            return _context11.finish(45);

          case 49:
            return _context11.finish(40);

          case 50:
            return _context11.abrupt("return", true);

          case 51:
            return _context11.abrupt("return", false);

          case 52:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11, null, [[11, 36, 40, 50], [41,, 45, 49]]);
  }));
  return _gatherText.apply(this, arguments);
}

function inMapper(value, fn) {
  if (value instanceof MapperValue) {
    return new MapperValue(new StreamValue( /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/runtime_1.mark(function _callee() {
      var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, elementValue;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _context.prev = 2;
              _iterator = _asyncIterator(value);

            case 4:
              _context.next = 6;
              return _awaitAsyncGenerator(_iterator.next());

            case 6:
              _step = _context.sent;
              _iteratorNormalCompletion = _step.done;
              _context.next = 10;
              return _awaitAsyncGenerator(_step.value);

            case 10:
              _value = _context.sent;

              if (_iteratorNormalCompletion) {
                _context.next = 18;
                break;
              }

              elementValue = _value;
              _context.next = 15;
              return fn(elementValue);

            case 15:
              _iteratorNormalCompletion = true;
              _context.next = 4;
              break;

            case 18:
              _context.next = 24;
              break;

            case 20:
              _context.prev = 20;
              _context.t0 = _context["catch"](2);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 24:
              _context.prev = 24;
              _context.prev = 25;

              if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
                _context.next = 29;
                break;
              }

              _context.next = 29;
              return _awaitAsyncGenerator(_iterator["return"]());

            case 29:
              _context.prev = 29;

              if (!_didIteratorError) {
                _context.next = 32;
                break;
              }

              throw _iteratorError;

            case 32:
              return _context.finish(29);

            case 33:
              return _context.finish(24);

            case 34:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[2, 20, 24, 34], [25,, 29, 33]]);
    }))));
  } else {
    return fn(value);
  }
}

var Scope = /*#__PURE__*/function () {
  function Scope(params, source, value, parent) {
    this.params = params;
    this.source = source;
    this.value = value;
    this.parent = parent;
    this.timestamp = parent ? parent.timestamp : new Date().toISOString();
  }

  var _proto = Scope.prototype;

  _proto.createNested = function createNested(value) {
    return new Scope(this.params, this.source, value, this);
  };

  return Scope;
}();

function execute(node, scope) {
  if (typeof EXECUTORS[node.type] === 'undefined') {
    throw new Error('No executor for node.type=' + node.type);
  }

  var func = EXECUTORS[node.type];
  return func(node, scope);
}

var EXECUTORS = {
  This: function This(_, scope) {
    return scope.value;
  },
  Star: function Star(_, scope) {
    return scope.source;
  },
  Parameter: function Parameter(_ref6, scope) {
    var name = _ref6.name;
    return fromJS(scope.params[name]);
  },
  Parent: function Parent(node, scope) {
    var current = scope;

    for (var i = 0; i < node.n; i++) {
      if (!current.parent) {
        return NULL_VALUE;
      }

      current = current.parent;
    }

    return current.value;
  },
  OpCall: function OpCall(_ref7, scope) {
    var op = _ref7.op,
        left = _ref7.left,
        right = _ref7.right;
    var func = operators[op];
    if (!func) throw new Error('Unknown operator: ' + op);
    return func(left, right, scope, execute);
  },
  FuncCall: function FuncCall(_ref8, scope) {
    var func = _ref8.func,
        args = _ref8.args;
    return func(args, scope, execute);
  },
  PipeFuncCall: function PipeFuncCall(_ref9, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
      var func, base, args, baseValue;
      return runtime_1.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              func = _ref9.func, base = _ref9.base, args = _ref9.args;
              _context2.next = 3;
              return execute(base, scope);

            case 3:
              baseValue = _context2.sent;
              return _context2.abrupt("return", func(baseValue, args, scope, execute));

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  Filter: function Filter(_ref10, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5() {
      var base, query, baseValue;
      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              base = _ref10.base, query = _ref10.query;
              _context5.next = 3;
              return execute(base, scope);

            case 3:
              baseValue = _context5.sent;
              return _context5.abrupt("return", inMapper(baseValue, /*#__PURE__*/function () {
                var _ref11 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(value) {
                  return runtime_1.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          if (!(value.getType() !== 'array')) {
                            _context4.next = 2;
                            break;
                          }

                          return _context4.abrupt("return", NULL_VALUE);

                        case 2:
                          return _context4.abrupt("return", new StreamValue( /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/runtime_1.mark(function _callee3() {
                            var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, element, newScope, condValue;

                            return runtime_1.wrap(function _callee3$(_context3) {
                              while (1) {
                                switch (_context3.prev = _context3.next) {
                                  case 0:
                                    _iteratorNormalCompletion2 = true;
                                    _didIteratorError2 = false;
                                    _context3.prev = 2;
                                    _iterator2 = _asyncIterator(value);

                                  case 4:
                                    _context3.next = 6;
                                    return _awaitAsyncGenerator(_iterator2.next());

                                  case 6:
                                    _step2 = _context3.sent;
                                    _iteratorNormalCompletion2 = _step2.done;
                                    _context3.next = 10;
                                    return _awaitAsyncGenerator(_step2.value);

                                  case 10:
                                    _value2 = _context3.sent;

                                    if (_iteratorNormalCompletion2) {
                                      _context3.next = 23;
                                      break;
                                    }

                                    element = _value2;
                                    newScope = scope.createNested(element);
                                    _context3.next = 16;
                                    return _awaitAsyncGenerator(execute(query, newScope));

                                  case 16:
                                    condValue = _context3.sent;

                                    if (!condValue.getBoolean()) {
                                      _context3.next = 20;
                                      break;
                                    }

                                    _context3.next = 20;
                                    return element;

                                  case 20:
                                    _iteratorNormalCompletion2 = true;
                                    _context3.next = 4;
                                    break;

                                  case 23:
                                    _context3.next = 29;
                                    break;

                                  case 25:
                                    _context3.prev = 25;
                                    _context3.t0 = _context3["catch"](2);
                                    _didIteratorError2 = true;
                                    _iteratorError2 = _context3.t0;

                                  case 29:
                                    _context3.prev = 29;
                                    _context3.prev = 30;

                                    if (!(!_iteratorNormalCompletion2 && _iterator2["return"] != null)) {
                                      _context3.next = 34;
                                      break;
                                    }

                                    _context3.next = 34;
                                    return _awaitAsyncGenerator(_iterator2["return"]());

                                  case 34:
                                    _context3.prev = 34;

                                    if (!_didIteratorError2) {
                                      _context3.next = 37;
                                      break;
                                    }

                                    throw _iteratorError2;

                                  case 37:
                                    return _context3.finish(34);

                                  case 38:
                                    return _context3.finish(29);

                                  case 39:
                                  case "end":
                                    return _context3.stop();
                                }
                              }
                            }, _callee3, null, [[2, 25, 29, 39], [30,, 34, 38]]);
                          }))));

                        case 3:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }));

                return function (_x) {
                  return _ref11.apply(this, arguments);
                };
              }()));

            case 5:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }))();
  },
  Element: function Element(_ref12, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee7() {
      var base, index, baseValue;
      return runtime_1.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              base = _ref12.base, index = _ref12.index;
              _context7.next = 3;
              return execute(base, scope);

            case 3:
              baseValue = _context7.sent;
              return _context7.abrupt("return", inMapper(baseValue, /*#__PURE__*/function () {
                var _ref13 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(arrayValue) {
                  var idxValue, array, idx;
                  return runtime_1.wrap(function _callee6$(_context6) {
                    while (1) {
                      switch (_context6.prev = _context6.next) {
                        case 0:
                          if (!(arrayValue.getType() !== 'array')) {
                            _context6.next = 2;
                            break;
                          }

                          return _context6.abrupt("return", NULL_VALUE);

                        case 2:
                          _context6.next = 4;
                          return execute(index, scope);

                        case 4:
                          idxValue = _context6.sent;

                          if (!(idxValue.getType() !== 'number')) {
                            _context6.next = 7;
                            break;
                          }

                          return _context6.abrupt("return", NULL_VALUE);

                        case 7:
                          _context6.next = 9;
                          return arrayValue.get();

                        case 9:
                          array = _context6.sent;
                          _context6.next = 12;
                          return idxValue.get();

                        case 12:
                          idx = _context6.sent;

                          if (idx < 0) {
                            idx = array.length + idx;
                          }

                          if (!(idx >= 0 && idx < array.length)) {
                            _context6.next = 18;
                            break;
                          }

                          return _context6.abrupt("return", new StaticValue(array[idx]));

                        case 18:
                          return _context6.abrupt("return", NULL_VALUE);

                        case 19:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  }, _callee6);
                }));

                return function (_x2) {
                  return _ref13.apply(this, arguments);
                };
              }()));

            case 5:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7);
    }))();
  },
  Slice: function Slice(_ref14, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee9() {
      var base, left, right, isExclusive, baseValue;
      return runtime_1.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              base = _ref14.base, left = _ref14.left, right = _ref14.right, isExclusive = _ref14.isExclusive;
              _context9.next = 3;
              return execute(base, scope);

            case 3:
              baseValue = _context9.sent;
              return _context9.abrupt("return", inMapper(baseValue, /*#__PURE__*/function () {
                var _ref15 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee8(arrayValue) {
                  var leftIdxValue, rightIdxValue, array, leftIdx, rightIdx;
                  return runtime_1.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          if (!(arrayValue.getType() !== 'array')) {
                            _context8.next = 2;
                            break;
                          }

                          return _context8.abrupt("return", NULL_VALUE);

                        case 2:
                          _context8.next = 4;
                          return execute(left, scope);

                        case 4:
                          leftIdxValue = _context8.sent;
                          _context8.next = 7;
                          return execute(right, scope);

                        case 7:
                          rightIdxValue = _context8.sent;

                          if (!(leftIdxValue.getType() !== 'number' || rightIdxValue.getType() !== 'number')) {
                            _context8.next = 10;
                            break;
                          }

                          return _context8.abrupt("return", NULL_VALUE);

                        case 10:
                          _context8.next = 12;
                          return arrayValue.get();

                        case 12:
                          array = _context8.sent;
                          _context8.next = 15;
                          return leftIdxValue.get();

                        case 15:
                          leftIdx = _context8.sent;
                          _context8.next = 18;
                          return rightIdxValue.get();

                        case 18:
                          rightIdx = _context8.sent;
                          // Handle negative index
                          if (leftIdx < 0) leftIdx = array.length + leftIdx;
                          if (rightIdx < 0) rightIdx = array.length + rightIdx; // Convert from inclusive to exclusive index

                          if (!isExclusive) rightIdx++;
                          if (leftIdx < 0) leftIdx = 0;
                          if (rightIdx < 0) rightIdx = 0; // Note: At this point the indices might point out-of-bound, but
                          // .slice handles this correctly.

                          return _context8.abrupt("return", new StaticValue(array.slice(leftIdx, rightIdx)));

                        case 25:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8);
                }));

                return function (_x3) {
                  return _ref15.apply(this, arguments);
                };
              }()));

            case 5:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9);
    }))();
  },
  Attribute: function Attribute(_ref16, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee11() {
      var base, name, baseValue;
      return runtime_1.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              base = _ref16.base, name = _ref16.name;
              _context11.next = 3;
              return execute(base, scope);

            case 3:
              baseValue = _context11.sent;
              return _context11.abrupt("return", inMapper(baseValue, /*#__PURE__*/function () {
                var _ref17 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee10(value) {
                  var data;
                  return runtime_1.wrap(function _callee10$(_context10) {
                    while (1) {
                      switch (_context10.prev = _context10.next) {
                        case 0:
                          if (!(value.getType() === 'object')) {
                            _context10.next = 6;
                            break;
                          }

                          _context10.next = 3;
                          return value.get();

                        case 3:
                          data = _context10.sent;

                          if (!data.hasOwnProperty(name)) {
                            _context10.next = 6;
                            break;
                          }

                          return _context10.abrupt("return", new StaticValue(data[name]));

                        case 6:
                          return _context10.abrupt("return", NULL_VALUE);

                        case 7:
                        case "end":
                          return _context10.stop();
                      }
                    }
                  }, _callee10);
                }));

                return function (_x4) {
                  return _ref17.apply(this, arguments);
                };
              }()));

            case 5:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11);
    }))();
  },
  Identifier: function Identifier(_ref18, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee12() {
      var name, data;
      return runtime_1.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              name = _ref18.name;

              if (!(scope.value.getType() === 'object')) {
                _context12.next = 7;
                break;
              }

              _context12.next = 4;
              return scope.value.get();

            case 4:
              data = _context12.sent;

              if (!data.hasOwnProperty(name)) {
                _context12.next = 7;
                break;
              }

              return _context12.abrupt("return", new StaticValue(data[name]));

            case 7:
              return _context12.abrupt("return", NULL_VALUE);

            case 8:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12);
    }))();
  },
  Value: function Value(_ref19) {
    var value = _ref19.value;
    return new StaticValue(value);
  },
  Mapper: function Mapper(_ref20, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee14() {
      var base, baseValue;
      return runtime_1.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              base = _ref20.base;
              _context14.next = 3;
              return execute(base, scope);

            case 3:
              baseValue = _context14.sent;

              if (!(baseValue.getType() !== 'array')) {
                _context14.next = 6;
                break;
              }

              return _context14.abrupt("return", baseValue);

            case 6:
              if (!(baseValue instanceof MapperValue)) {
                _context14.next = 10;
                break;
              }

              return _context14.abrupt("return", new MapperValue(new StreamValue( /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/runtime_1.mark(function _callee13() {
                var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, element, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _value4, subelement;

                return runtime_1.wrap(function _callee13$(_context13) {
                  while (1) {
                    switch (_context13.prev = _context13.next) {
                      case 0:
                        _iteratorNormalCompletion3 = true;
                        _didIteratorError3 = false;
                        _context13.prev = 2;
                        _iterator3 = _asyncIterator(baseValue);

                      case 4:
                        _context13.next = 6;
                        return _awaitAsyncGenerator(_iterator3.next());

                      case 6:
                        _step3 = _context13.sent;
                        _iteratorNormalCompletion3 = _step3.done;
                        _context13.next = 10;
                        return _awaitAsyncGenerator(_step3.value);

                      case 10:
                        _value3 = _context13.sent;

                        if (_iteratorNormalCompletion3) {
                          _context13.next = 55;
                          break;
                        }

                        element = _value3;

                        if (!(element.getType() === 'array')) {
                          _context13.next = 50;
                          break;
                        }

                        _iteratorNormalCompletion4 = true;
                        _didIteratorError4 = false;
                        _context13.prev = 16;
                        _iterator4 = _asyncIterator(element);

                      case 18:
                        _context13.next = 20;
                        return _awaitAsyncGenerator(_iterator4.next());

                      case 20:
                        _step4 = _context13.sent;
                        _iteratorNormalCompletion4 = _step4.done;
                        _context13.next = 24;
                        return _awaitAsyncGenerator(_step4.value);

                      case 24:
                        _value4 = _context13.sent;

                        if (_iteratorNormalCompletion4) {
                          _context13.next = 32;
                          break;
                        }

                        subelement = _value4;
                        _context13.next = 29;
                        return subelement;

                      case 29:
                        _iteratorNormalCompletion4 = true;
                        _context13.next = 18;
                        break;

                      case 32:
                        _context13.next = 38;
                        break;

                      case 34:
                        _context13.prev = 34;
                        _context13.t0 = _context13["catch"](16);
                        _didIteratorError4 = true;
                        _iteratorError4 = _context13.t0;

                      case 38:
                        _context13.prev = 38;
                        _context13.prev = 39;

                        if (!(!_iteratorNormalCompletion4 && _iterator4["return"] != null)) {
                          _context13.next = 43;
                          break;
                        }

                        _context13.next = 43;
                        return _awaitAsyncGenerator(_iterator4["return"]());

                      case 43:
                        _context13.prev = 43;

                        if (!_didIteratorError4) {
                          _context13.next = 46;
                          break;
                        }

                        throw _iteratorError4;

                      case 46:
                        return _context13.finish(43);

                      case 47:
                        return _context13.finish(38);

                      case 48:
                        _context13.next = 52;
                        break;

                      case 50:
                        _context13.next = 52;
                        return NULL_VALUE;

                      case 52:
                        _iteratorNormalCompletion3 = true;
                        _context13.next = 4;
                        break;

                      case 55:
                        _context13.next = 61;
                        break;

                      case 57:
                        _context13.prev = 57;
                        _context13.t1 = _context13["catch"](2);
                        _didIteratorError3 = true;
                        _iteratorError3 = _context13.t1;

                      case 61:
                        _context13.prev = 61;
                        _context13.prev = 62;

                        if (!(!_iteratorNormalCompletion3 && _iterator3["return"] != null)) {
                          _context13.next = 66;
                          break;
                        }

                        _context13.next = 66;
                        return _awaitAsyncGenerator(_iterator3["return"]());

                      case 66:
                        _context13.prev = 66;

                        if (!_didIteratorError3) {
                          _context13.next = 69;
                          break;
                        }

                        throw _iteratorError3;

                      case 69:
                        return _context13.finish(66);

                      case 70:
                        return _context13.finish(61);

                      case 71:
                      case "end":
                        return _context13.stop();
                    }
                  }
                }, _callee13, null, [[2, 57, 61, 71], [16, 34, 38, 48], [39,, 43, 47], [62,, 66, 70]]);
              })))));

            case 10:
              return _context14.abrupt("return", new MapperValue(baseValue));

            case 11:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14);
    }))();
  },
  Parenthesis: function Parenthesis(_ref21, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee15() {
      var base, baseValue;
      return runtime_1.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              base = _ref21.base;
              _context15.next = 3;
              return execute(base, scope);

            case 3:
              baseValue = _context15.sent;

              if (baseValue instanceof MapperValue) {
                baseValue = baseValue.value;
              }

              return _context15.abrupt("return", baseValue);

            case 6:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15);
    }))();
  },
  Projection: function Projection(_ref22, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee18() {
      var base, query, baseValue;
      return runtime_1.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              base = _ref22.base, query = _ref22.query;
              _context18.next = 3;
              return execute(base, scope);

            case 3:
              baseValue = _context18.sent;
              return _context18.abrupt("return", inMapper(baseValue, /*#__PURE__*/function () {
                var _ref23 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee17(baseValue) {
                  var newScope;
                  return runtime_1.wrap(function _callee17$(_context17) {
                    while (1) {
                      switch (_context17.prev = _context17.next) {
                        case 0:
                          if (!(baseValue.getType() === 'null')) {
                            _context17.next = 2;
                            break;
                          }

                          return _context17.abrupt("return", NULL_VALUE);

                        case 2:
                          if (!(baseValue.getType() === 'array')) {
                            _context17.next = 4;
                            break;
                          }

                          return _context17.abrupt("return", new StreamValue( /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/runtime_1.mark(function _callee16() {
                            var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _value5, value, _newScope, newValue;

                            return runtime_1.wrap(function _callee16$(_context16) {
                              while (1) {
                                switch (_context16.prev = _context16.next) {
                                  case 0:
                                    _iteratorNormalCompletion5 = true;
                                    _didIteratorError5 = false;
                                    _context16.prev = 2;
                                    _iterator5 = _asyncIterator(baseValue);

                                  case 4:
                                    _context16.next = 6;
                                    return _awaitAsyncGenerator(_iterator5.next());

                                  case 6:
                                    _step5 = _context16.sent;
                                    _iteratorNormalCompletion5 = _step5.done;
                                    _context16.next = 10;
                                    return _awaitAsyncGenerator(_step5.value);

                                  case 10:
                                    _value5 = _context16.sent;

                                    if (_iteratorNormalCompletion5) {
                                      _context16.next = 22;
                                      break;
                                    }

                                    value = _value5;
                                    _newScope = scope.createNested(value);
                                    _context16.next = 16;
                                    return _awaitAsyncGenerator(execute(query, _newScope));

                                  case 16:
                                    newValue = _context16.sent;
                                    _context16.next = 19;
                                    return newValue;

                                  case 19:
                                    _iteratorNormalCompletion5 = true;
                                    _context16.next = 4;
                                    break;

                                  case 22:
                                    _context16.next = 28;
                                    break;

                                  case 24:
                                    _context16.prev = 24;
                                    _context16.t0 = _context16["catch"](2);
                                    _didIteratorError5 = true;
                                    _iteratorError5 = _context16.t0;

                                  case 28:
                                    _context16.prev = 28;
                                    _context16.prev = 29;

                                    if (!(!_iteratorNormalCompletion5 && _iterator5["return"] != null)) {
                                      _context16.next = 33;
                                      break;
                                    }

                                    _context16.next = 33;
                                    return _awaitAsyncGenerator(_iterator5["return"]());

                                  case 33:
                                    _context16.prev = 33;

                                    if (!_didIteratorError5) {
                                      _context16.next = 36;
                                      break;
                                    }

                                    throw _iteratorError5;

                                  case 36:
                                    return _context16.finish(33);

                                  case 37:
                                    return _context16.finish(28);

                                  case 38:
                                  case "end":
                                    return _context16.stop();
                                }
                              }
                            }, _callee16, null, [[2, 24, 28, 38], [29,, 33, 37]]);
                          }))));

                        case 4:
                          newScope = scope.createNested(baseValue);
                          _context17.next = 7;
                          return execute(query, newScope);

                        case 7:
                          return _context17.abrupt("return", _context17.sent);

                        case 8:
                        case "end":
                          return _context17.stop();
                      }
                    }
                  }, _callee17);
                }));

                return function (_x5) {
                  return _ref23.apply(this, arguments);
                };
              }()));

            case 5:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18);
    }))();
  },
  Deref: function Deref(_ref24, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee20() {
      var base, baseValue;
      return runtime_1.wrap(function _callee20$(_context20) {
        while (1) {
          switch (_context20.prev = _context20.next) {
            case 0:
              base = _ref24.base;
              _context20.next = 3;
              return execute(base, scope);

            case 3:
              baseValue = _context20.sent;
              return _context20.abrupt("return", inMapper(baseValue, /*#__PURE__*/function () {
                var _ref25 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee19(baseValue) {
                  var id, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _value6, doc;

                  return runtime_1.wrap(function _callee19$(_context19) {
                    while (1) {
                      switch (_context19.prev = _context19.next) {
                        case 0:
                          if (!(scope.source.getType() !== 'array')) {
                            _context19.next = 2;
                            break;
                          }

                          return _context19.abrupt("return", NULL_VALUE);

                        case 2:
                          if (!(baseValue.getType() !== 'object')) {
                            _context19.next = 4;
                            break;
                          }

                          return _context19.abrupt("return", NULL_VALUE);

                        case 4:
                          _context19.next = 6;
                          return baseValue.get();

                        case 6:
                          id = _context19.sent._ref;

                          if (!(typeof id !== 'string')) {
                            _context19.next = 9;
                            break;
                          }

                          return _context19.abrupt("return", NULL_VALUE);

                        case 9:
                          _iteratorNormalCompletion6 = true;
                          _didIteratorError6 = false;
                          _context19.prev = 11;
                          _iterator6 = _asyncIterator(scope.source);

                        case 13:
                          _context19.next = 15;
                          return _iterator6.next();

                        case 15:
                          _step6 = _context19.sent;
                          _iteratorNormalCompletion6 = _step6.done;
                          _context19.next = 19;
                          return _step6.value;

                        case 19:
                          _value6 = _context19.sent;

                          if (_iteratorNormalCompletion6) {
                            _context19.next = 27;
                            break;
                          }

                          doc = _value6;

                          if (!(id === doc.data._id)) {
                            _context19.next = 24;
                            break;
                          }

                          return _context19.abrupt("return", doc);

                        case 24:
                          _iteratorNormalCompletion6 = true;
                          _context19.next = 13;
                          break;

                        case 27:
                          _context19.next = 33;
                          break;

                        case 29:
                          _context19.prev = 29;
                          _context19.t0 = _context19["catch"](11);
                          _didIteratorError6 = true;
                          _iteratorError6 = _context19.t0;

                        case 33:
                          _context19.prev = 33;
                          _context19.prev = 34;

                          if (!(!_iteratorNormalCompletion6 && _iterator6["return"] != null)) {
                            _context19.next = 38;
                            break;
                          }

                          _context19.next = 38;
                          return _iterator6["return"]();

                        case 38:
                          _context19.prev = 38;

                          if (!_didIteratorError6) {
                            _context19.next = 41;
                            break;
                          }

                          throw _iteratorError6;

                        case 41:
                          return _context19.finish(38);

                        case 42:
                          return _context19.finish(33);

                        case 43:
                          return _context19.abrupt("return", NULL_VALUE);

                        case 44:
                        case "end":
                          return _context19.stop();
                      }
                    }
                  }, _callee19, null, [[11, 29, 33, 43], [34,, 38, 42]]);
                }));

                return function (_x6) {
                  return _ref25.apply(this, arguments);
                };
              }()));

            case 5:
            case "end":
              return _context20.stop();
          }
        }
      }, _callee20);
    }))();
  },
  Object: /*#__PURE__*/function (_Object) {
    function Object(_x7, _x8) {
      return _Object.apply(this, arguments);
    }

    Object.toString = function () {
      return _Object.toString();
    };

    return Object;
  }(function (_ref26, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee21() {
      var attributes, result, _iterator8, _step8, attr, attrType, key, value, cond, _value8, _value9;

      return runtime_1.wrap(function _callee21$(_context21) {
        while (1) {
          switch (_context21.prev = _context21.next) {
            case 0:
              attributes = _ref26.attributes;
              result = {};
              _iterator8 = _createForOfIteratorHelperLoose(attributes);

            case 3:
              if ((_step8 = _iterator8()).done) {
                _context21.next = 44;
                break;
              }

              attr = _step8.value;
              attrType = attr.type;
              _context21.t0 = attr.type;
              _context21.next = _context21.t0 === 'ObjectAttribute' ? 9 : _context21.t0 === 'ObjectConditionalSplat' ? 24 : _context21.t0 === 'ObjectSplat' ? 36 : 41;
              break;

            case 9:
              _context21.next = 11;
              return execute(attr.key, scope);

            case 11:
              key = _context21.sent;

              if (!(key.getType() !== 'string')) {
                _context21.next = 14;
                break;
              }

              return _context21.abrupt("continue", 42);

            case 14:
              _context21.next = 16;
              return execute(attr.value, scope);

            case 16:
              value = _context21.sent;

              if (!(value.getType() === 'null')) {
                _context21.next = 20;
                break;
              }

              delete result[key.data];
              return _context21.abrupt("break", 42);

            case 20:
              _context21.next = 22;
              return value.get();

            case 22:
              result[key.data] = _context21.sent;
              return _context21.abrupt("break", 42);

            case 24:
              _context21.next = 26;
              return execute(attr.condition, scope);

            case 26:
              cond = _context21.sent;

              if (cond.getBoolean()) {
                _context21.next = 29;
                break;
              }

              return _context21.abrupt("continue", 42);

            case 29:
              _context21.next = 31;
              return execute(attr.value, scope);

            case 31:
              _value8 = _context21.sent;

              if (!(_value8.getType() !== 'object')) {
                _context21.next = 34;
                break;
              }

              return _context21.abrupt("continue", 42);

            case 34:
              Object.assign(result, _value8.data);
              return _context21.abrupt("break", 42);

            case 36:
              _context21.next = 38;
              return execute(attr.value, scope);

            case 38:
              _value9 = _context21.sent;

              if (_value9.getType('object')) {
                Object.assign(result, _value9.data);
              }

              return _context21.abrupt("break", 42);

            case 41:
              throw new Error('Unknown node type: ' + attrType);

            case 42:
              _context21.next = 3;
              break;

            case 44:
              return _context21.abrupt("return", new StaticValue(result));

            case 45:
            case "end":
              return _context21.stop();
          }
        }
      }, _callee21);
    }))();
  }),
  Array: function Array(_ref27, scope) {
    var elements = _ref27.elements;
    return new StreamValue( /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/runtime_1.mark(function _callee22() {
      var _iterator9, _step9, element, value, _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, _value7, v;

      return runtime_1.wrap(function _callee22$(_context22) {
        while (1) {
          switch (_context22.prev = _context22.next) {
            case 0:
              _iterator9 = _createForOfIteratorHelperLoose(elements);

            case 1:
              if ((_step9 = _iterator9()).done) {
                _context22.next = 48;
                break;
              }

              element = _step9.value;
              _context22.next = 5;
              return _awaitAsyncGenerator(execute(element.value, scope));

            case 5:
              value = _context22.sent;

              if (!element.isSplat) {
                _context22.next = 44;
                break;
              }

              if (!(value.getType() === 'array')) {
                _context22.next = 42;
                break;
              }

              _iteratorNormalCompletion7 = true;
              _didIteratorError7 = false;
              _context22.prev = 10;
              _iterator7 = _asyncIterator(value);

            case 12:
              _context22.next = 14;
              return _awaitAsyncGenerator(_iterator7.next());

            case 14:
              _step7 = _context22.sent;
              _iteratorNormalCompletion7 = _step7.done;
              _context22.next = 18;
              return _awaitAsyncGenerator(_step7.value);

            case 18:
              _value7 = _context22.sent;

              if (_iteratorNormalCompletion7) {
                _context22.next = 26;
                break;
              }

              v = _value7;
              _context22.next = 23;
              return v;

            case 23:
              _iteratorNormalCompletion7 = true;
              _context22.next = 12;
              break;

            case 26:
              _context22.next = 32;
              break;

            case 28:
              _context22.prev = 28;
              _context22.t0 = _context22["catch"](10);
              _didIteratorError7 = true;
              _iteratorError7 = _context22.t0;

            case 32:
              _context22.prev = 32;
              _context22.prev = 33;

              if (!(!_iteratorNormalCompletion7 && _iterator7["return"] != null)) {
                _context22.next = 37;
                break;
              }

              _context22.next = 37;
              return _awaitAsyncGenerator(_iterator7["return"]());

            case 37:
              _context22.prev = 37;

              if (!_didIteratorError7) {
                _context22.next = 40;
                break;
              }

              throw _iteratorError7;

            case 40:
              return _context22.finish(37);

            case 41:
              return _context22.finish(32);

            case 42:
              _context22.next = 46;
              break;

            case 44:
              _context22.next = 46;
              return value;

            case 46:
              _context22.next = 1;
              break;

            case 48:
            case "end":
              return _context22.stop();
          }
        }
      }, _callee22, null, [[10, 28, 32, 42], [33,, 37, 41]]);
    })));
  },
  Range: function Range$1(_ref28, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee23() {
      var left, right, isExclusive, leftValue, rightValue, range;
      return runtime_1.wrap(function _callee23$(_context23) {
        while (1) {
          switch (_context23.prev = _context23.next) {
            case 0:
              left = _ref28.left, right = _ref28.right, isExclusive = _ref28.isExclusive;
              _context23.next = 3;
              return execute(left, scope);

            case 3:
              leftValue = _context23.sent;
              _context23.next = 6;
              return execute(right, scope);

            case 6:
              rightValue = _context23.sent;

              if (Range.isConstructible(leftValue.getType(), rightValue.getType())) {
                _context23.next = 9;
                break;
              }

              return _context23.abrupt("return", NULL_VALUE);

            case 9:
              _context23.t0 = Range;
              _context23.next = 12;
              return leftValue.get();

            case 12:
              _context23.t1 = _context23.sent;
              _context23.next = 15;
              return rightValue.get();

            case 15:
              _context23.t2 = _context23.sent;
              _context23.t3 = isExclusive;
              range = new _context23.t0(_context23.t1, _context23.t2, _context23.t3);
              return _context23.abrupt("return", new StaticValue(range));

            case 19:
            case "end":
              return _context23.stop();
          }
        }
      }, _callee23);
    }))();
  },
  Pair: function Pair$1(_ref29, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee24() {
      var left, right, leftValue, rightValue, pair;
      return runtime_1.wrap(function _callee24$(_context24) {
        while (1) {
          switch (_context24.prev = _context24.next) {
            case 0:
              left = _ref29.left, right = _ref29.right;
              _context24.next = 3;
              return execute(left, scope);

            case 3:
              leftValue = _context24.sent;
              _context24.next = 6;
              return execute(right, scope);

            case 6:
              rightValue = _context24.sent;
              _context24.t0 = Pair;
              _context24.next = 10;
              return leftValue.get();

            case 10:
              _context24.t1 = _context24.sent;
              _context24.next = 13;
              return rightValue.get();

            case 13:
              _context24.t2 = _context24.sent;
              pair = new _context24.t0(_context24.t1, _context24.t2);
              return _context24.abrupt("return", new StaticValue(pair));

            case 16:
            case "end":
              return _context24.stop();
          }
        }
      }, _callee24);
    }))();
  },
  Or: function Or(_ref30, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee25() {
      var left, right, leftValue, rightValue;
      return runtime_1.wrap(function _callee25$(_context25) {
        while (1) {
          switch (_context25.prev = _context25.next) {
            case 0:
              left = _ref30.left, right = _ref30.right;
              _context25.next = 3;
              return execute(left, scope);

            case 3:
              leftValue = _context25.sent;
              _context25.next = 6;
              return execute(right, scope);

            case 6:
              rightValue = _context25.sent;

              if (!(leftValue.getType() === 'boolean')) {
                _context25.next = 10;
                break;
              }

              if (!(leftValue.data === true)) {
                _context25.next = 10;
                break;
              }

              return _context25.abrupt("return", TRUE_VALUE);

            case 10:
              if (!(rightValue.getType() === 'boolean')) {
                _context25.next = 13;
                break;
              }

              if (!(rightValue.data === true)) {
                _context25.next = 13;
                break;
              }

              return _context25.abrupt("return", TRUE_VALUE);

            case 13:
              if (!(leftValue.getType() !== 'boolean')) {
                _context25.next = 15;
                break;
              }

              return _context25.abrupt("return", NULL_VALUE);

            case 15:
              if (!(rightValue.getType() !== 'boolean')) {
                _context25.next = 17;
                break;
              }

              return _context25.abrupt("return", NULL_VALUE);

            case 17:
              return _context25.abrupt("return", FALSE_VALUE);

            case 18:
            case "end":
              return _context25.stop();
          }
        }
      }, _callee25);
    }))();
  },
  And: function And(_ref31, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee26() {
      var left, right, leftValue, rightValue;
      return runtime_1.wrap(function _callee26$(_context26) {
        while (1) {
          switch (_context26.prev = _context26.next) {
            case 0:
              left = _ref31.left, right = _ref31.right;
              _context26.next = 3;
              return execute(left, scope);

            case 3:
              leftValue = _context26.sent;
              _context26.next = 6;
              return execute(right, scope);

            case 6:
              rightValue = _context26.sent;

              if (!(leftValue.getType() === 'boolean')) {
                _context26.next = 10;
                break;
              }

              if (!(leftValue.data === false)) {
                _context26.next = 10;
                break;
              }

              return _context26.abrupt("return", FALSE_VALUE);

            case 10:
              if (!(rightValue.getType() === 'boolean')) {
                _context26.next = 13;
                break;
              }

              if (!(rightValue.data === false)) {
                _context26.next = 13;
                break;
              }

              return _context26.abrupt("return", FALSE_VALUE);

            case 13:
              if (!(leftValue.getType() !== 'boolean')) {
                _context26.next = 15;
                break;
              }

              return _context26.abrupt("return", NULL_VALUE);

            case 15:
              if (!(rightValue.getType() !== 'boolean')) {
                _context26.next = 17;
                break;
              }

              return _context26.abrupt("return", NULL_VALUE);

            case 17:
              return _context26.abrupt("return", TRUE_VALUE);

            case 18:
            case "end":
              return _context26.stop();
          }
        }
      }, _callee26);
    }))();
  },
  Not: function Not(_ref32, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee27() {
      var base, value;
      return runtime_1.wrap(function _callee27$(_context27) {
        while (1) {
          switch (_context27.prev = _context27.next) {
            case 0:
              base = _ref32.base;
              _context27.next = 3;
              return execute(base, scope);

            case 3:
              value = _context27.sent;

              if (!(value.getType() !== 'boolean')) {
                _context27.next = 6;
                break;
              }

              return _context27.abrupt("return", NULL_VALUE);

            case 6:
              return _context27.abrupt("return", value.getBoolean() ? FALSE_VALUE : TRUE_VALUE);

            case 7:
            case "end":
              return _context27.stop();
          }
        }
      }, _callee27);
    }))();
  },
  Neg: function Neg(_ref33, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee28() {
      var base, value;
      return runtime_1.wrap(function _callee28$(_context28) {
        while (1) {
          switch (_context28.prev = _context28.next) {
            case 0:
              base = _ref33.base;
              _context28.next = 3;
              return execute(base, scope);

            case 3:
              value = _context28.sent;

              if (!(value.getType() !== 'number')) {
                _context28.next = 6;
                break;
              }

              return _context28.abrupt("return", NULL_VALUE);

            case 6:
              _context28.t0 = fromNumber;
              _context28.next = 9;
              return value.get();

            case 9:
              _context28.t1 = -_context28.sent;
              return _context28.abrupt("return", (0, _context28.t0)(_context28.t1));

            case 11:
            case "end":
              return _context28.stop();
          }
        }
      }, _callee28);
    }))();
  },
  Pos: function Pos(_ref34, scope) {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee29() {
      var base, value;
      return runtime_1.wrap(function _callee29$(_context29) {
        while (1) {
          switch (_context29.prev = _context29.next) {
            case 0:
              base = _ref34.base;
              _context29.next = 3;
              return execute(base, scope);

            case 3:
              value = _context29.sent;

              if (!(value.getType() !== 'number')) {
                _context29.next = 6;
                break;
              }

              return _context29.abrupt("return", NULL_VALUE);

            case 6:
              _context29.t0 = fromNumber;
              _context29.next = 9;
              return value.get();

            case 9:
              _context29.t1 = _context29.sent;
              return _context29.abrupt("return", (0, _context29.t0)(_context29.t1));

            case 11:
            case "end":
              return _context29.stop();
          }
        }
      }, _callee29);
    }))();
  },
  Asc: function Asc() {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee30() {
      return runtime_1.wrap(function _callee30$(_context30) {
        while (1) {
          switch (_context30.prev = _context30.next) {
            case 0:
              return _context30.abrupt("return", NULL_VALUE);

            case 1:
            case "end":
              return _context30.stop();
          }
        }
      }, _callee30);
    }))();
  },
  Desc: function Desc() {
    return _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee31() {
      return runtime_1.wrap(function _callee31$(_context31) {
        while (1) {
          switch (_context31.prev = _context31.next) {
            case 0:
              return _context31.abrupt("return", NULL_VALUE);

            case 1:
            case "end":
              return _context31.stop();
          }
        }
      }, _callee31);
    }))();
  }
};
/**
 * Evaluates a query.
 */

function evaluate(_x9, _x10) {
  return _evaluate.apply(this, arguments);
}

function _evaluate() {
  _evaluate = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee32(tree, options) {
    var root, dataset, params, scope;
    return runtime_1.wrap(function _callee32$(_context32) {
      while (1) {
        switch (_context32.prev = _context32.next) {
          case 0:
            if (options === void 0) {
              options = {};
            }

            root = fromJS(options.root);
            dataset = fromJS(options.dataset);
            params = _extends({}, options.params);
            scope = new Scope(params, dataset, root, null);
            _context32.next = 7;
            return execute(tree, scope);

          case 7:
            return _context32.abrupt("return", _context32.sent);

          case 8:
          case "end":
            return _context32.stop();
        }
      }
    }, _callee32);
  }));
  return _evaluate.apply(this, arguments);
}

export { evaluate, parse$1 as parse };
//# sourceMappingURL=groq-js.esm.js.map
